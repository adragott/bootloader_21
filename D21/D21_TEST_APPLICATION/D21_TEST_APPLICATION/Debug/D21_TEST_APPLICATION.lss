
D21_TEST_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000216c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000216c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c4  20000068  000021d4  00020068  2**2
                  ALLOC
  3 .stack        00002004  2000022c  00002398  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025f33  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033f6  00000000  00000000  0004601c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003f75  00000000  00000000  00049412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000460  00000000  00000000  0004d387  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004d0  00000000  00000000  0004d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005a65  00000000  00000000  0004dcb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a901  00000000  00000000  0005371c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e9f4  00000000  00000000  0005e01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d38  00000000  00000000  000eca14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 22 00 20 11 15 00 00 0d 15 00 00 0d 15 00 00     0". ............
	...
      2c:	0d 15 00 00 00 00 00 00 00 00 00 00 0d 15 00 00     ................
      3c:	0d 15 00 00 0d 15 00 00 0d 15 00 00 0d 15 00 00     ................
      4c:	0d 15 00 00 0d 15 00 00 0d 15 00 00 0d 15 00 00     ................
      5c:	0d 15 00 00 0d 15 00 00 b1 07 00 00 c1 07 00 00     ................
      6c:	d1 07 00 00 e1 07 00 00 f1 07 00 00 01 08 00 00     ................
      7c:	61 01 00 00 71 01 00 00 81 01 00 00 0d 15 00 00     a...q...........
      8c:	0d 15 00 00 0d 15 00 00 0d 15 00 00 0d 15 00 00     ................
      9c:	0d 15 00 00 0d 15 00 00 0d 15 00 00 0d 15 00 00     ................
      ac:	0d 15 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	0000216c 	.word	0x0000216c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	0000216c 	.word	0x0000216c
     10c:	0000216c 	.word	0x0000216c
     110:	00000000 	.word	0x00000000

00000114 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46c6      	mov	lr, r8
     118:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     11a:	0080      	lsls	r0, r0, #2
     11c:	4b0e      	ldr	r3, [pc, #56]	; (158 <_tcc_interrupt_handler+0x44>)
     11e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     120:	683b      	ldr	r3, [r7, #0]
     122:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     128:	4013      	ands	r3, r2
     12a:	401e      	ands	r6, r3
     12c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     12e:	4b0b      	ldr	r3, [pc, #44]	; (15c <_tcc_interrupt_handler+0x48>)
     130:	4698      	mov	r8, r3
     132:	e002      	b.n	13a <_tcc_interrupt_handler+0x26>
     134:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     136:	2c30      	cmp	r4, #48	; 0x30
     138:	d00a      	beq.n	150 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     13a:	4643      	mov	r3, r8
     13c:	58e5      	ldr	r5, [r4, r3]
     13e:	4235      	tst	r5, r6
     140:	d0f8      	beq.n	134 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     142:	193b      	adds	r3, r7, r4
     144:	685b      	ldr	r3, [r3, #4]
     146:	0038      	movs	r0, r7
     148:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     14a:	683b      	ldr	r3, [r7, #0]
     14c:	62dd      	str	r5, [r3, #44]	; 0x2c
     14e:	e7f1      	b.n	134 <_tcc_interrupt_handler+0x20>
		}
	}
}
     150:	bc04      	pop	{r2}
     152:	4690      	mov	r8, r2
     154:	bdf0      	pop	{r4, r5, r6, r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	200000cc 	.word	0x200000cc
     15c:	0000207c 	.word	0x0000207c

00000160 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     160:	b510      	push	{r4, lr}
     162:	2000      	movs	r0, #0
     164:	4b01      	ldr	r3, [pc, #4]	; (16c <TCC0_Handler+0xc>)
     166:	4798      	blx	r3
     168:	bd10      	pop	{r4, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	00000115 	.word	0x00000115

00000170 <TCC1_Handler>:
     170:	b510      	push	{r4, lr}
     172:	2001      	movs	r0, #1
     174:	4b01      	ldr	r3, [pc, #4]	; (17c <TCC1_Handler+0xc>)
     176:	4798      	blx	r3
     178:	bd10      	pop	{r4, pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	00000115 	.word	0x00000115

00000180 <TCC2_Handler>:
     180:	b510      	push	{r4, lr}
     182:	2002      	movs	r0, #2
     184:	4b01      	ldr	r3, [pc, #4]	; (18c <TCC2_Handler+0xc>)
     186:	4798      	blx	r3
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00000115 	.word	0x00000115

00000190 <pprint>:
	
	DEBUG("HELLO\n");
}

void pprint(struct usart_module* mod, const char* str, ...)
{
     190:	b40e      	push	{r1, r2, r3}
     192:	b570      	push	{r4, r5, r6, lr}
     194:	b083      	sub	sp, #12
     196:	ad07      	add	r5, sp, #28
     198:	cd40      	ldmia	r5!, {r6}
	memset(pprint_buffer, '\0', MAX_PPRINT_BUFFER_SIZE);
     19a:	4c0d      	ldr	r4, [pc, #52]	; (1d0 <pprint+0x40>)
     19c:	2280      	movs	r2, #128	; 0x80
     19e:	0052      	lsls	r2, r2, #1
     1a0:	2100      	movs	r1, #0
     1a2:	0020      	movs	r0, r4
     1a4:	4b0b      	ldr	r3, [pc, #44]	; (1d4 <pprint+0x44>)
     1a6:	4798      	blx	r3
	va_list args;
	va_start(args, str);
     1a8:	9501      	str	r5, [sp, #4]
	vsprintf((char*)pprint_buffer,str, args);
     1aa:	002a      	movs	r2, r5
     1ac:	0031      	movs	r1, r6
     1ae:	0020      	movs	r0, r4
     1b0:	4b09      	ldr	r3, [pc, #36]	; (1d8 <pprint+0x48>)
     1b2:	4798      	blx	r3
	va_end(args);
	int x = strlen((const char*)pprint_buffer);
     1b4:	0020      	movs	r0, r4
     1b6:	4b09      	ldr	r3, [pc, #36]	; (1dc <pprint+0x4c>)
     1b8:	4798      	blx	r3
	usart_write_buffer_wait(&debug_mod, (uint8_t*)pprint_buffer, strlen((const char*)pprint_buffer));
     1ba:	b282      	uxth	r2, r0
     1bc:	0021      	movs	r1, r4
     1be:	4808      	ldr	r0, [pc, #32]	; (1e0 <pprint+0x50>)
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <pprint+0x54>)
     1c2:	4798      	blx	r3
}
     1c4:	b003      	add	sp, #12
     1c6:	bc70      	pop	{r4, r5, r6}
     1c8:	bc08      	pop	{r3}
     1ca:	b003      	add	sp, #12
     1cc:	4718      	bx	r3
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	200000d8 	.word	0x200000d8
     1d4:	0000182b 	.word	0x0000182b
     1d8:	00001879 	.word	0x00001879
     1dc:	0000183b 	.word	0x0000183b
     1e0:	200001d8 	.word	0x200001d8
     1e4:	00000b81 	.word	0x00000b81

000001e8 <pusart_init>:
{
     1e8:	b570      	push	{r4, r5, r6, lr}
     1ea:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     1ec:	2380      	movs	r3, #128	; 0x80
     1ee:	05db      	lsls	r3, r3, #23
     1f0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     1f2:	2300      	movs	r3, #0
     1f4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     1f6:	22ff      	movs	r2, #255	; 0xff
     1f8:	4669      	mov	r1, sp
     1fa:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     1fc:	2200      	movs	r2, #0
     1fe:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     200:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     202:	2401      	movs	r4, #1
     204:	2124      	movs	r1, #36	; 0x24
     206:	4668      	mov	r0, sp
     208:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     20a:	3101      	adds	r1, #1
     20c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     20e:	3101      	adds	r1, #1
     210:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     212:	3101      	adds	r1, #1
     214:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     216:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     218:	3105      	adds	r1, #5
     21a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     21c:	3101      	adds	r1, #1
     21e:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     220:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     222:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     224:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     226:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     228:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     22a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     22c:	2313      	movs	r3, #19
     22e:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     230:	7742      	strb	r2, [r0, #29]
	debug_conf.baudrate = USART_DEBUG_BAUD;
     232:	23e1      	movs	r3, #225	; 0xe1
     234:	025b      	lsls	r3, r3, #9
     236:	9308      	str	r3, [sp, #32]
	debug_conf.pinmux_pad0 = USART_DEBUG_PIN0;
     238:	4b19      	ldr	r3, [pc, #100]	; (2a0 <pusart_init+0xb8>)
     23a:	930c      	str	r3, [sp, #48]	; 0x30
	debug_conf.pinmux_pad1 = USART_DEBUG_PIN1;
     23c:	4b19      	ldr	r3, [pc, #100]	; (2a4 <pusart_init+0xbc>)
     23e:	930d      	str	r3, [sp, #52]	; 0x34
	debug_conf.pinmux_pad2 = USART_DEBUG_PIN2;
     240:	2301      	movs	r3, #1
     242:	425b      	negs	r3, r3
     244:	930e      	str	r3, [sp, #56]	; 0x38
	debug_conf.pinmux_pad3 = USART_DEBUG_PIN3;
     246:	930f      	str	r3, [sp, #60]	; 0x3c
	debug_conf.mux_setting = USART_DEBUG_MUX;
     248:	2380      	movs	r3, #128	; 0x80
     24a:	035b      	lsls	r3, r3, #13
     24c:	9303      	str	r3, [sp, #12]
	usart_init(&debug_mod, USART_DEBUG_SERCOM, &debug_conf);
     24e:	4e16      	ldr	r6, [pc, #88]	; (2a8 <pusart_init+0xc0>)
     250:	466a      	mov	r2, sp
     252:	4916      	ldr	r1, [pc, #88]	; (2ac <pusart_init+0xc4>)
     254:	0030      	movs	r0, r6
     256:	4b16      	ldr	r3, [pc, #88]	; (2b0 <pusart_init+0xc8>)
     258:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     25a:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     25c:	0028      	movs	r0, r5
     25e:	4b15      	ldr	r3, [pc, #84]	; (2b4 <pusart_init+0xcc>)
     260:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     262:	231f      	movs	r3, #31
     264:	4018      	ands	r0, r3
     266:	4084      	lsls	r4, r0
     268:	4b13      	ldr	r3, [pc, #76]	; (2b8 <pusart_init+0xd0>)
     26a:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     26c:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
     26e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     270:	2b00      	cmp	r3, #0
     272:	d1fc      	bne.n	26e <pusart_init+0x86>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     274:	682b      	ldr	r3, [r5, #0]
     276:	2202      	movs	r2, #2
     278:	4313      	orrs	r3, r2
     27a:	602b      	str	r3, [r5, #0]
	usart_register_callback(&debug_mod, debug_rx_cb, USART_CALLBACK_BUFFER_RECEIVED);
     27c:	4c0a      	ldr	r4, [pc, #40]	; (2a8 <pusart_init+0xc0>)
     27e:	3a01      	subs	r2, #1
     280:	490e      	ldr	r1, [pc, #56]	; (2bc <pusart_init+0xd4>)
     282:	0020      	movs	r0, r4
     284:	4b0e      	ldr	r3, [pc, #56]	; (2c0 <pusart_init+0xd8>)
     286:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     288:	2231      	movs	r2, #49	; 0x31
     28a:	5ca3      	ldrb	r3, [r4, r2]
     28c:	2102      	movs	r1, #2
     28e:	430b      	orrs	r3, r1
     290:	54a3      	strb	r3, [r4, r2]
	DEBUG("HELLO\n");
     292:	490c      	ldr	r1, [pc, #48]	; (2c4 <pusart_init+0xdc>)
     294:	0020      	movs	r0, r4
     296:	4b0c      	ldr	r3, [pc, #48]	; (2c8 <pusart_init+0xe0>)
     298:	4798      	blx	r3
}
     29a:	b010      	add	sp, #64	; 0x40
     29c:	bd70      	pop	{r4, r5, r6, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	00160002 	.word	0x00160002
     2a4:	00170002 	.word	0x00170002
     2a8:	200001d8 	.word	0x200001d8
     2ac:	42001400 	.word	0x42001400
     2b0:	00000811 	.word	0x00000811
     2b4:	00000781 	.word	0x00000781
     2b8:	e000e100 	.word	0xe000e100
     2bc:	000002cd 	.word	0x000002cd
     2c0:	00000c91 	.word	0x00000c91
     2c4:	000020b0 	.word	0x000020b0
     2c8:	00000191 	.word	0x00000191

000002cc <debug_rx_cb>:
{
	usart_read_buffer_job(USART_DEBUG, (uint8_t*)debug_rx_buffer, DEBUG_RX_SIZE);
}

void debug_rx_cb(struct usart_module* const mod)
{
     2cc:	b510      	push	{r4, lr}
	pprint(mod, "%s", &debug_rx_buffer[0]);
     2ce:	4a02      	ldr	r2, [pc, #8]	; (2d8 <debug_rx_cb+0xc>)
     2d0:	4902      	ldr	r1, [pc, #8]	; (2dc <debug_rx_cb+0x10>)
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <debug_rx_cb+0x14>)
     2d4:	4798      	blx	r3
     2d6:	bd10      	pop	{r4, pc}
     2d8:	2000020c 	.word	0x2000020c
     2dc:	000020ac 	.word	0x000020ac
     2e0:	00000191 	.word	0x00000191

000002e4 <pusart_service>:
{
     2e4:	b510      	push	{r4, lr}
	usart_read_buffer_job(USART_DEBUG, (uint8_t*)debug_rx_buffer, DEBUG_RX_SIZE);
     2e6:	2201      	movs	r2, #1
     2e8:	4902      	ldr	r1, [pc, #8]	; (2f4 <pusart_service+0x10>)
     2ea:	4803      	ldr	r0, [pc, #12]	; (2f8 <pusart_service+0x14>)
     2ec:	4b03      	ldr	r3, [pc, #12]	; (2fc <pusart_service+0x18>)
     2ee:	4798      	blx	r3
}
     2f0:	bd10      	pop	{r4, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	2000020c 	.word	0x2000020c
     2f8:	200001d8 	.word	0x200001d8
     2fc:	00000ca9 	.word	0x00000ca9

00000300 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     300:	4b0c      	ldr	r3, [pc, #48]	; (334 <cpu_irq_enter_critical+0x34>)
     302:	681b      	ldr	r3, [r3, #0]
     304:	2b00      	cmp	r3, #0
     306:	d106      	bne.n	316 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     308:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     30c:	2b00      	cmp	r3, #0
     30e:	d007      	beq.n	320 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     310:	2200      	movs	r2, #0
     312:	4b09      	ldr	r3, [pc, #36]	; (338 <cpu_irq_enter_critical+0x38>)
     314:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     316:	4a07      	ldr	r2, [pc, #28]	; (334 <cpu_irq_enter_critical+0x34>)
     318:	6813      	ldr	r3, [r2, #0]
     31a:	3301      	adds	r3, #1
     31c:	6013      	str	r3, [r2, #0]
}
     31e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     320:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     322:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     326:	2200      	movs	r2, #0
     328:	4b04      	ldr	r3, [pc, #16]	; (33c <cpu_irq_enter_critical+0x3c>)
     32a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     32c:	3201      	adds	r2, #1
     32e:	4b02      	ldr	r3, [pc, #8]	; (338 <cpu_irq_enter_critical+0x38>)
     330:	701a      	strb	r2, [r3, #0]
     332:	e7f0      	b.n	316 <cpu_irq_enter_critical+0x16>
     334:	20000084 	.word	0x20000084
     338:	20000088 	.word	0x20000088
     33c:	20000000 	.word	0x20000000

00000340 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     340:	4b08      	ldr	r3, [pc, #32]	; (364 <cpu_irq_leave_critical+0x24>)
     342:	681a      	ldr	r2, [r3, #0]
     344:	3a01      	subs	r2, #1
     346:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     348:	681b      	ldr	r3, [r3, #0]
     34a:	2b00      	cmp	r3, #0
     34c:	d109      	bne.n	362 <cpu_irq_leave_critical+0x22>
     34e:	4b06      	ldr	r3, [pc, #24]	; (368 <cpu_irq_leave_critical+0x28>)
     350:	781b      	ldrb	r3, [r3, #0]
     352:	2b00      	cmp	r3, #0
     354:	d005      	beq.n	362 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     356:	2201      	movs	r2, #1
     358:	4b04      	ldr	r3, [pc, #16]	; (36c <cpu_irq_leave_critical+0x2c>)
     35a:	701a      	strb	r2, [r3, #0]
     35c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     360:	b662      	cpsie	i
	}
}
     362:	4770      	bx	lr
     364:	20000084 	.word	0x20000084
     368:	20000088 	.word	0x20000088
     36c:	20000000 	.word	0x20000000

00000370 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     370:	b5f0      	push	{r4, r5, r6, r7, lr}
     372:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     374:	ac01      	add	r4, sp, #4
     376:	2501      	movs	r5, #1
     378:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     37a:	2700      	movs	r7, #0
     37c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     37e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     380:	0021      	movs	r1, r4
     382:	203e      	movs	r0, #62	; 0x3e
     384:	4e06      	ldr	r6, [pc, #24]	; (3a0 <system_board_init+0x30>)
     386:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     388:	2280      	movs	r2, #128	; 0x80
     38a:	05d2      	lsls	r2, r2, #23
     38c:	4b05      	ldr	r3, [pc, #20]	; (3a4 <system_board_init+0x34>)
     38e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     390:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     392:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     394:	0021      	movs	r1, r4
     396:	200f      	movs	r0, #15
     398:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     39a:	b003      	add	sp, #12
     39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	000003a9 	.word	0x000003a9
     3a4:	41004480 	.word	0x41004480

000003a8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     3a8:	b500      	push	{lr}
     3aa:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     3ac:	ab01      	add	r3, sp, #4
     3ae:	2280      	movs	r2, #128	; 0x80
     3b0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     3b2:	780a      	ldrb	r2, [r1, #0]
     3b4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     3b6:	784a      	ldrb	r2, [r1, #1]
     3b8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     3ba:	788a      	ldrb	r2, [r1, #2]
     3bc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     3be:	0019      	movs	r1, r3
     3c0:	4b01      	ldr	r3, [pc, #4]	; (3c8 <port_pin_set_config+0x20>)
     3c2:	4798      	blx	r3
}
     3c4:	b003      	add	sp, #12
     3c6:	bd00      	pop	{pc}
     3c8:	000014ad 	.word	0x000014ad

000003cc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ce:	46de      	mov	lr, fp
     3d0:	4657      	mov	r7, sl
     3d2:	464e      	mov	r6, r9
     3d4:	4645      	mov	r5, r8
     3d6:	b5e0      	push	{r5, r6, r7, lr}
     3d8:	b087      	sub	sp, #28
     3da:	4680      	mov	r8, r0
     3dc:	9104      	str	r1, [sp, #16]
     3de:	0016      	movs	r6, r2
     3e0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3e2:	2200      	movs	r2, #0
     3e4:	2300      	movs	r3, #0
     3e6:	2100      	movs	r1, #0
     3e8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     3ea:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     3ec:	2001      	movs	r0, #1
     3ee:	0021      	movs	r1, r4
     3f0:	9600      	str	r6, [sp, #0]
     3f2:	9701      	str	r7, [sp, #4]
     3f4:	465c      	mov	r4, fp
     3f6:	9403      	str	r4, [sp, #12]
     3f8:	4644      	mov	r4, r8
     3fa:	9405      	str	r4, [sp, #20]
     3fc:	e013      	b.n	426 <long_division+0x5a>
     3fe:	2420      	movs	r4, #32
     400:	1a64      	subs	r4, r4, r1
     402:	0005      	movs	r5, r0
     404:	40e5      	lsrs	r5, r4
     406:	46a8      	mov	r8, r5
     408:	e014      	b.n	434 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     40a:	9c00      	ldr	r4, [sp, #0]
     40c:	9d01      	ldr	r5, [sp, #4]
     40e:	1b12      	subs	r2, r2, r4
     410:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     412:	465c      	mov	r4, fp
     414:	464d      	mov	r5, r9
     416:	432c      	orrs	r4, r5
     418:	46a3      	mov	fp, r4
     41a:	9c03      	ldr	r4, [sp, #12]
     41c:	4645      	mov	r5, r8
     41e:	432c      	orrs	r4, r5
     420:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     422:	3901      	subs	r1, #1
     424:	d325      	bcc.n	472 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     426:	2420      	movs	r4, #32
     428:	4264      	negs	r4, r4
     42a:	190c      	adds	r4, r1, r4
     42c:	d4e7      	bmi.n	3fe <long_division+0x32>
     42e:	0005      	movs	r5, r0
     430:	40a5      	lsls	r5, r4
     432:	46a8      	mov	r8, r5
     434:	0004      	movs	r4, r0
     436:	408c      	lsls	r4, r1
     438:	46a1      	mov	r9, r4
		r = r << 1;
     43a:	1892      	adds	r2, r2, r2
     43c:	415b      	adcs	r3, r3
     43e:	0014      	movs	r4, r2
     440:	001d      	movs	r5, r3
		if (n & bit_shift) {
     442:	9e05      	ldr	r6, [sp, #20]
     444:	464f      	mov	r7, r9
     446:	403e      	ands	r6, r7
     448:	46b4      	mov	ip, r6
     44a:	9e04      	ldr	r6, [sp, #16]
     44c:	4647      	mov	r7, r8
     44e:	403e      	ands	r6, r7
     450:	46b2      	mov	sl, r6
     452:	4666      	mov	r6, ip
     454:	4657      	mov	r7, sl
     456:	433e      	orrs	r6, r7
     458:	d003      	beq.n	462 <long_division+0x96>
			r |= 0x01;
     45a:	0006      	movs	r6, r0
     45c:	4326      	orrs	r6, r4
     45e:	0032      	movs	r2, r6
     460:	002b      	movs	r3, r5
		if (r >= d) {
     462:	9c00      	ldr	r4, [sp, #0]
     464:	9d01      	ldr	r5, [sp, #4]
     466:	429d      	cmp	r5, r3
     468:	d8db      	bhi.n	422 <long_division+0x56>
     46a:	d1ce      	bne.n	40a <long_division+0x3e>
     46c:	4294      	cmp	r4, r2
     46e:	d8d8      	bhi.n	422 <long_division+0x56>
     470:	e7cb      	b.n	40a <long_division+0x3e>
     472:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     474:	4658      	mov	r0, fp
     476:	0019      	movs	r1, r3
     478:	b007      	add	sp, #28
     47a:	bc3c      	pop	{r2, r3, r4, r5}
     47c:	4690      	mov	r8, r2
     47e:	4699      	mov	r9, r3
     480:	46a2      	mov	sl, r4
     482:	46ab      	mov	fp, r5
     484:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000486 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     486:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     488:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     48a:	2340      	movs	r3, #64	; 0x40
     48c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     48e:	4281      	cmp	r1, r0
     490:	d202      	bcs.n	498 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     492:	0018      	movs	r0, r3
     494:	bd10      	pop	{r4, pc}
		baud_calculated++;
     496:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     498:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     49a:	1c63      	adds	r3, r4, #1
     49c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     49e:	4288      	cmp	r0, r1
     4a0:	d9f9      	bls.n	496 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4a2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     4a4:	2cff      	cmp	r4, #255	; 0xff
     4a6:	d8f4      	bhi.n	492 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     4a8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4aa:	2300      	movs	r3, #0
     4ac:	e7f1      	b.n	492 <_sercom_get_sync_baud_val+0xc>
	...

000004b0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b2:	b083      	sub	sp, #12
     4b4:	000f      	movs	r7, r1
     4b6:	0016      	movs	r6, r2
     4b8:	aa08      	add	r2, sp, #32
     4ba:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4bc:	0004      	movs	r4, r0
     4be:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4c0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     4c2:	42bc      	cmp	r4, r7
     4c4:	d902      	bls.n	4cc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     4c6:	0010      	movs	r0, r2
     4c8:	b003      	add	sp, #12
     4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     4cc:	2b00      	cmp	r3, #0
     4ce:	d114      	bne.n	4fa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     4d0:	0002      	movs	r2, r0
     4d2:	0008      	movs	r0, r1
     4d4:	2100      	movs	r1, #0
     4d6:	4c19      	ldr	r4, [pc, #100]	; (53c <_sercom_get_async_baud_val+0x8c>)
     4d8:	47a0      	blx	r4
     4da:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     4dc:	003a      	movs	r2, r7
     4de:	2300      	movs	r3, #0
     4e0:	2000      	movs	r0, #0
     4e2:	4c17      	ldr	r4, [pc, #92]	; (540 <_sercom_get_async_baud_val+0x90>)
     4e4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4e6:	2200      	movs	r2, #0
     4e8:	2301      	movs	r3, #1
     4ea:	1a12      	subs	r2, r2, r0
     4ec:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     4ee:	0c12      	lsrs	r2, r2, #16
     4f0:	041b      	lsls	r3, r3, #16
     4f2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     4f4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     4f6:	2200      	movs	r2, #0
     4f8:	e7e5      	b.n	4c6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     4fa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4fc:	2b01      	cmp	r3, #1
     4fe:	d1f9      	bne.n	4f4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     500:	000a      	movs	r2, r1
     502:	2300      	movs	r3, #0
     504:	2100      	movs	r1, #0
     506:	4c0d      	ldr	r4, [pc, #52]	; (53c <_sercom_get_async_baud_val+0x8c>)
     508:	47a0      	blx	r4
     50a:	0002      	movs	r2, r0
     50c:	000b      	movs	r3, r1
     50e:	9200      	str	r2, [sp, #0]
     510:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     512:	0038      	movs	r0, r7
     514:	2100      	movs	r1, #0
     516:	4c0a      	ldr	r4, [pc, #40]	; (540 <_sercom_get_async_baud_val+0x90>)
     518:	47a0      	blx	r4
     51a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     51c:	2380      	movs	r3, #128	; 0x80
     51e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     520:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     522:	4298      	cmp	r0, r3
     524:	d8cf      	bhi.n	4c6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     526:	0f79      	lsrs	r1, r7, #29
     528:	00f8      	lsls	r0, r7, #3
     52a:	9a00      	ldr	r2, [sp, #0]
     52c:	9b01      	ldr	r3, [sp, #4]
     52e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     530:	00ea      	lsls	r2, r5, #3
     532:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     534:	b2d2      	uxtb	r2, r2
     536:	0352      	lsls	r2, r2, #13
     538:	432a      	orrs	r2, r5
     53a:	e7db      	b.n	4f4 <_sercom_get_async_baud_val+0x44>
     53c:	0000177d 	.word	0x0000177d
     540:	000003cd 	.word	0x000003cd

00000544 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     544:	b510      	push	{r4, lr}
     546:	b082      	sub	sp, #8
     548:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     54a:	4b0e      	ldr	r3, [pc, #56]	; (584 <sercom_set_gclk_generator+0x40>)
     54c:	781b      	ldrb	r3, [r3, #0]
     54e:	2b00      	cmp	r3, #0
     550:	d007      	beq.n	562 <sercom_set_gclk_generator+0x1e>
     552:	2900      	cmp	r1, #0
     554:	d105      	bne.n	562 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     556:	4b0b      	ldr	r3, [pc, #44]	; (584 <sercom_set_gclk_generator+0x40>)
     558:	785b      	ldrb	r3, [r3, #1]
     55a:	4283      	cmp	r3, r0
     55c:	d010      	beq.n	580 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     55e:	201d      	movs	r0, #29
     560:	e00c      	b.n	57c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     562:	a901      	add	r1, sp, #4
     564:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     566:	2013      	movs	r0, #19
     568:	4b07      	ldr	r3, [pc, #28]	; (588 <sercom_set_gclk_generator+0x44>)
     56a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     56c:	2013      	movs	r0, #19
     56e:	4b07      	ldr	r3, [pc, #28]	; (58c <sercom_set_gclk_generator+0x48>)
     570:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <sercom_set_gclk_generator+0x40>)
     574:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     576:	2201      	movs	r2, #1
     578:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     57a:	2000      	movs	r0, #0
}
     57c:	b002      	add	sp, #8
     57e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     580:	2000      	movs	r0, #0
     582:	e7fb      	b.n	57c <sercom_set_gclk_generator+0x38>
     584:	2000008c 	.word	0x2000008c
     588:	000013b5 	.word	0x000013b5
     58c:	00001329 	.word	0x00001329

00000590 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     590:	4b40      	ldr	r3, [pc, #256]	; (694 <_sercom_get_default_pad+0x104>)
     592:	4298      	cmp	r0, r3
     594:	d031      	beq.n	5fa <_sercom_get_default_pad+0x6a>
     596:	d90a      	bls.n	5ae <_sercom_get_default_pad+0x1e>
     598:	4b3f      	ldr	r3, [pc, #252]	; (698 <_sercom_get_default_pad+0x108>)
     59a:	4298      	cmp	r0, r3
     59c:	d04d      	beq.n	63a <_sercom_get_default_pad+0xaa>
     59e:	4b3f      	ldr	r3, [pc, #252]	; (69c <_sercom_get_default_pad+0x10c>)
     5a0:	4298      	cmp	r0, r3
     5a2:	d05a      	beq.n	65a <_sercom_get_default_pad+0xca>
     5a4:	4b3e      	ldr	r3, [pc, #248]	; (6a0 <_sercom_get_default_pad+0x110>)
     5a6:	4298      	cmp	r0, r3
     5a8:	d037      	beq.n	61a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     5aa:	2000      	movs	r0, #0
}
     5ac:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     5ae:	4b3d      	ldr	r3, [pc, #244]	; (6a4 <_sercom_get_default_pad+0x114>)
     5b0:	4298      	cmp	r0, r3
     5b2:	d00c      	beq.n	5ce <_sercom_get_default_pad+0x3e>
     5b4:	4b3c      	ldr	r3, [pc, #240]	; (6a8 <_sercom_get_default_pad+0x118>)
     5b6:	4298      	cmp	r0, r3
     5b8:	d1f7      	bne.n	5aa <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ba:	2901      	cmp	r1, #1
     5bc:	d017      	beq.n	5ee <_sercom_get_default_pad+0x5e>
     5be:	2900      	cmp	r1, #0
     5c0:	d05d      	beq.n	67e <_sercom_get_default_pad+0xee>
     5c2:	2902      	cmp	r1, #2
     5c4:	d015      	beq.n	5f2 <_sercom_get_default_pad+0x62>
     5c6:	2903      	cmp	r1, #3
     5c8:	d015      	beq.n	5f6 <_sercom_get_default_pad+0x66>
	return 0;
     5ca:	2000      	movs	r0, #0
     5cc:	e7ee      	b.n	5ac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ce:	2901      	cmp	r1, #1
     5d0:	d007      	beq.n	5e2 <_sercom_get_default_pad+0x52>
     5d2:	2900      	cmp	r1, #0
     5d4:	d051      	beq.n	67a <_sercom_get_default_pad+0xea>
     5d6:	2902      	cmp	r1, #2
     5d8:	d005      	beq.n	5e6 <_sercom_get_default_pad+0x56>
     5da:	2903      	cmp	r1, #3
     5dc:	d005      	beq.n	5ea <_sercom_get_default_pad+0x5a>
	return 0;
     5de:	2000      	movs	r0, #0
     5e0:	e7e4      	b.n	5ac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5e2:	4832      	ldr	r0, [pc, #200]	; (6ac <_sercom_get_default_pad+0x11c>)
     5e4:	e7e2      	b.n	5ac <_sercom_get_default_pad+0x1c>
     5e6:	4832      	ldr	r0, [pc, #200]	; (6b0 <_sercom_get_default_pad+0x120>)
     5e8:	e7e0      	b.n	5ac <_sercom_get_default_pad+0x1c>
     5ea:	4832      	ldr	r0, [pc, #200]	; (6b4 <_sercom_get_default_pad+0x124>)
     5ec:	e7de      	b.n	5ac <_sercom_get_default_pad+0x1c>
     5ee:	4832      	ldr	r0, [pc, #200]	; (6b8 <_sercom_get_default_pad+0x128>)
     5f0:	e7dc      	b.n	5ac <_sercom_get_default_pad+0x1c>
     5f2:	4832      	ldr	r0, [pc, #200]	; (6bc <_sercom_get_default_pad+0x12c>)
     5f4:	e7da      	b.n	5ac <_sercom_get_default_pad+0x1c>
     5f6:	4832      	ldr	r0, [pc, #200]	; (6c0 <_sercom_get_default_pad+0x130>)
     5f8:	e7d8      	b.n	5ac <_sercom_get_default_pad+0x1c>
     5fa:	2901      	cmp	r1, #1
     5fc:	d007      	beq.n	60e <_sercom_get_default_pad+0x7e>
     5fe:	2900      	cmp	r1, #0
     600:	d03f      	beq.n	682 <_sercom_get_default_pad+0xf2>
     602:	2902      	cmp	r1, #2
     604:	d005      	beq.n	612 <_sercom_get_default_pad+0x82>
     606:	2903      	cmp	r1, #3
     608:	d005      	beq.n	616 <_sercom_get_default_pad+0x86>
	return 0;
     60a:	2000      	movs	r0, #0
     60c:	e7ce      	b.n	5ac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60e:	482d      	ldr	r0, [pc, #180]	; (6c4 <_sercom_get_default_pad+0x134>)
     610:	e7cc      	b.n	5ac <_sercom_get_default_pad+0x1c>
     612:	482d      	ldr	r0, [pc, #180]	; (6c8 <_sercom_get_default_pad+0x138>)
     614:	e7ca      	b.n	5ac <_sercom_get_default_pad+0x1c>
     616:	482d      	ldr	r0, [pc, #180]	; (6cc <_sercom_get_default_pad+0x13c>)
     618:	e7c8      	b.n	5ac <_sercom_get_default_pad+0x1c>
     61a:	2901      	cmp	r1, #1
     61c:	d007      	beq.n	62e <_sercom_get_default_pad+0x9e>
     61e:	2900      	cmp	r1, #0
     620:	d031      	beq.n	686 <_sercom_get_default_pad+0xf6>
     622:	2902      	cmp	r1, #2
     624:	d005      	beq.n	632 <_sercom_get_default_pad+0xa2>
     626:	2903      	cmp	r1, #3
     628:	d005      	beq.n	636 <_sercom_get_default_pad+0xa6>
	return 0;
     62a:	2000      	movs	r0, #0
     62c:	e7be      	b.n	5ac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     62e:	4828      	ldr	r0, [pc, #160]	; (6d0 <_sercom_get_default_pad+0x140>)
     630:	e7bc      	b.n	5ac <_sercom_get_default_pad+0x1c>
     632:	4828      	ldr	r0, [pc, #160]	; (6d4 <_sercom_get_default_pad+0x144>)
     634:	e7ba      	b.n	5ac <_sercom_get_default_pad+0x1c>
     636:	4828      	ldr	r0, [pc, #160]	; (6d8 <_sercom_get_default_pad+0x148>)
     638:	e7b8      	b.n	5ac <_sercom_get_default_pad+0x1c>
     63a:	2901      	cmp	r1, #1
     63c:	d007      	beq.n	64e <_sercom_get_default_pad+0xbe>
     63e:	2900      	cmp	r1, #0
     640:	d023      	beq.n	68a <_sercom_get_default_pad+0xfa>
     642:	2902      	cmp	r1, #2
     644:	d005      	beq.n	652 <_sercom_get_default_pad+0xc2>
     646:	2903      	cmp	r1, #3
     648:	d005      	beq.n	656 <_sercom_get_default_pad+0xc6>
	return 0;
     64a:	2000      	movs	r0, #0
     64c:	e7ae      	b.n	5ac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     64e:	4823      	ldr	r0, [pc, #140]	; (6dc <_sercom_get_default_pad+0x14c>)
     650:	e7ac      	b.n	5ac <_sercom_get_default_pad+0x1c>
     652:	4823      	ldr	r0, [pc, #140]	; (6e0 <_sercom_get_default_pad+0x150>)
     654:	e7aa      	b.n	5ac <_sercom_get_default_pad+0x1c>
     656:	4823      	ldr	r0, [pc, #140]	; (6e4 <_sercom_get_default_pad+0x154>)
     658:	e7a8      	b.n	5ac <_sercom_get_default_pad+0x1c>
     65a:	2901      	cmp	r1, #1
     65c:	d007      	beq.n	66e <_sercom_get_default_pad+0xde>
     65e:	2900      	cmp	r1, #0
     660:	d015      	beq.n	68e <_sercom_get_default_pad+0xfe>
     662:	2902      	cmp	r1, #2
     664:	d005      	beq.n	672 <_sercom_get_default_pad+0xe2>
     666:	2903      	cmp	r1, #3
     668:	d005      	beq.n	676 <_sercom_get_default_pad+0xe6>
	return 0;
     66a:	2000      	movs	r0, #0
     66c:	e79e      	b.n	5ac <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     66e:	481e      	ldr	r0, [pc, #120]	; (6e8 <_sercom_get_default_pad+0x158>)
     670:	e79c      	b.n	5ac <_sercom_get_default_pad+0x1c>
     672:	481e      	ldr	r0, [pc, #120]	; (6ec <_sercom_get_default_pad+0x15c>)
     674:	e79a      	b.n	5ac <_sercom_get_default_pad+0x1c>
     676:	481e      	ldr	r0, [pc, #120]	; (6f0 <_sercom_get_default_pad+0x160>)
     678:	e798      	b.n	5ac <_sercom_get_default_pad+0x1c>
     67a:	481e      	ldr	r0, [pc, #120]	; (6f4 <_sercom_get_default_pad+0x164>)
     67c:	e796      	b.n	5ac <_sercom_get_default_pad+0x1c>
     67e:	2003      	movs	r0, #3
     680:	e794      	b.n	5ac <_sercom_get_default_pad+0x1c>
     682:	481d      	ldr	r0, [pc, #116]	; (6f8 <_sercom_get_default_pad+0x168>)
     684:	e792      	b.n	5ac <_sercom_get_default_pad+0x1c>
     686:	481d      	ldr	r0, [pc, #116]	; (6fc <_sercom_get_default_pad+0x16c>)
     688:	e790      	b.n	5ac <_sercom_get_default_pad+0x1c>
     68a:	481d      	ldr	r0, [pc, #116]	; (700 <_sercom_get_default_pad+0x170>)
     68c:	e78e      	b.n	5ac <_sercom_get_default_pad+0x1c>
     68e:	481d      	ldr	r0, [pc, #116]	; (704 <_sercom_get_default_pad+0x174>)
     690:	e78c      	b.n	5ac <_sercom_get_default_pad+0x1c>
     692:	46c0      	nop			; (mov r8, r8)
     694:	42001000 	.word	0x42001000
     698:	42001800 	.word	0x42001800
     69c:	42001c00 	.word	0x42001c00
     6a0:	42001400 	.word	0x42001400
     6a4:	42000800 	.word	0x42000800
     6a8:	42000c00 	.word	0x42000c00
     6ac:	00050003 	.word	0x00050003
     6b0:	00060003 	.word	0x00060003
     6b4:	00070003 	.word	0x00070003
     6b8:	00010003 	.word	0x00010003
     6bc:	001e0003 	.word	0x001e0003
     6c0:	001f0003 	.word	0x001f0003
     6c4:	00090003 	.word	0x00090003
     6c8:	000a0003 	.word	0x000a0003
     6cc:	000b0003 	.word	0x000b0003
     6d0:	00110003 	.word	0x00110003
     6d4:	00120003 	.word	0x00120003
     6d8:	00130003 	.word	0x00130003
     6dc:	000d0003 	.word	0x000d0003
     6e0:	000e0003 	.word	0x000e0003
     6e4:	000f0003 	.word	0x000f0003
     6e8:	00170003 	.word	0x00170003
     6ec:	00180003 	.word	0x00180003
     6f0:	00190003 	.word	0x00190003
     6f4:	00040003 	.word	0x00040003
     6f8:	00080003 	.word	0x00080003
     6fc:	00100003 	.word	0x00100003
     700:	000c0003 	.word	0x000c0003
     704:	00160003 	.word	0x00160003

00000708 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     708:	b530      	push	{r4, r5, lr}
     70a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     70c:	4b0b      	ldr	r3, [pc, #44]	; (73c <_sercom_get_sercom_inst_index+0x34>)
     70e:	466a      	mov	r2, sp
     710:	cb32      	ldmia	r3!, {r1, r4, r5}
     712:	c232      	stmia	r2!, {r1, r4, r5}
     714:	cb32      	ldmia	r3!, {r1, r4, r5}
     716:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     718:	9b00      	ldr	r3, [sp, #0]
     71a:	4283      	cmp	r3, r0
     71c:	d00b      	beq.n	736 <_sercom_get_sercom_inst_index+0x2e>
     71e:	2301      	movs	r3, #1
     720:	009a      	lsls	r2, r3, #2
     722:	4669      	mov	r1, sp
     724:	5852      	ldr	r2, [r2, r1]
     726:	4282      	cmp	r2, r0
     728:	d006      	beq.n	738 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     72a:	3301      	adds	r3, #1
     72c:	2b06      	cmp	r3, #6
     72e:	d1f7      	bne.n	720 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     730:	2000      	movs	r0, #0
}
     732:	b007      	add	sp, #28
     734:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     736:	2300      	movs	r3, #0
			return i;
     738:	b2d8      	uxtb	r0, r3
     73a:	e7fa      	b.n	732 <_sercom_get_sercom_inst_index+0x2a>
     73c:	000020b8 	.word	0x000020b8

00000740 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     740:	4770      	bx	lr
	...

00000744 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     744:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     746:	4b0a      	ldr	r3, [pc, #40]	; (770 <_sercom_set_handler+0x2c>)
     748:	781b      	ldrb	r3, [r3, #0]
     74a:	2b00      	cmp	r3, #0
     74c:	d10c      	bne.n	768 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     74e:	4f09      	ldr	r7, [pc, #36]	; (774 <_sercom_set_handler+0x30>)
     750:	4e09      	ldr	r6, [pc, #36]	; (778 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     752:	4d0a      	ldr	r5, [pc, #40]	; (77c <_sercom_set_handler+0x38>)
     754:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     756:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     758:	195a      	adds	r2, r3, r5
     75a:	6014      	str	r4, [r2, #0]
     75c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     75e:	2b18      	cmp	r3, #24
     760:	d1f9      	bne.n	756 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     762:	2201      	movs	r2, #1
     764:	4b02      	ldr	r3, [pc, #8]	; (770 <_sercom_set_handler+0x2c>)
     766:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     768:	0080      	lsls	r0, r0, #2
     76a:	4b02      	ldr	r3, [pc, #8]	; (774 <_sercom_set_handler+0x30>)
     76c:	50c1      	str	r1, [r0, r3]
}
     76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     770:	2000008e 	.word	0x2000008e
     774:	20000090 	.word	0x20000090
     778:	00000741 	.word	0x00000741
     77c:	20000210 	.word	0x20000210

00000780 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     780:	b500      	push	{lr}
     782:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     784:	2309      	movs	r3, #9
     786:	466a      	mov	r2, sp
     788:	7013      	strb	r3, [r2, #0]
     78a:	3301      	adds	r3, #1
     78c:	7053      	strb	r3, [r2, #1]
     78e:	3301      	adds	r3, #1
     790:	7093      	strb	r3, [r2, #2]
     792:	3301      	adds	r3, #1
     794:	70d3      	strb	r3, [r2, #3]
     796:	3301      	adds	r3, #1
     798:	7113      	strb	r3, [r2, #4]
     79a:	3301      	adds	r3, #1
     79c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     79e:	4b03      	ldr	r3, [pc, #12]	; (7ac <_sercom_get_interrupt_vector+0x2c>)
     7a0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     7a2:	466b      	mov	r3, sp
     7a4:	5618      	ldrsb	r0, [r3, r0]
}
     7a6:	b003      	add	sp, #12
     7a8:	bd00      	pop	{pc}
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00000709 	.word	0x00000709

000007b0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     7b0:	b510      	push	{r4, lr}
     7b2:	4b02      	ldr	r3, [pc, #8]	; (7bc <SERCOM0_Handler+0xc>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	2000      	movs	r0, #0
     7b8:	4798      	blx	r3
     7ba:	bd10      	pop	{r4, pc}
     7bc:	20000090 	.word	0x20000090

000007c0 <SERCOM1_Handler>:
     7c0:	b510      	push	{r4, lr}
     7c2:	4b02      	ldr	r3, [pc, #8]	; (7cc <SERCOM1_Handler+0xc>)
     7c4:	685b      	ldr	r3, [r3, #4]
     7c6:	2001      	movs	r0, #1
     7c8:	4798      	blx	r3
     7ca:	bd10      	pop	{r4, pc}
     7cc:	20000090 	.word	0x20000090

000007d0 <SERCOM2_Handler>:
     7d0:	b510      	push	{r4, lr}
     7d2:	4b02      	ldr	r3, [pc, #8]	; (7dc <SERCOM2_Handler+0xc>)
     7d4:	689b      	ldr	r3, [r3, #8]
     7d6:	2002      	movs	r0, #2
     7d8:	4798      	blx	r3
     7da:	bd10      	pop	{r4, pc}
     7dc:	20000090 	.word	0x20000090

000007e0 <SERCOM3_Handler>:
     7e0:	b510      	push	{r4, lr}
     7e2:	4b02      	ldr	r3, [pc, #8]	; (7ec <SERCOM3_Handler+0xc>)
     7e4:	68db      	ldr	r3, [r3, #12]
     7e6:	2003      	movs	r0, #3
     7e8:	4798      	blx	r3
     7ea:	bd10      	pop	{r4, pc}
     7ec:	20000090 	.word	0x20000090

000007f0 <SERCOM4_Handler>:
     7f0:	b510      	push	{r4, lr}
     7f2:	4b02      	ldr	r3, [pc, #8]	; (7fc <SERCOM4_Handler+0xc>)
     7f4:	691b      	ldr	r3, [r3, #16]
     7f6:	2004      	movs	r0, #4
     7f8:	4798      	blx	r3
     7fa:	bd10      	pop	{r4, pc}
     7fc:	20000090 	.word	0x20000090

00000800 <SERCOM5_Handler>:
     800:	b510      	push	{r4, lr}
     802:	4b02      	ldr	r3, [pc, #8]	; (80c <SERCOM5_Handler+0xc>)
     804:	695b      	ldr	r3, [r3, #20]
     806:	2005      	movs	r0, #5
     808:	4798      	blx	r3
     80a:	bd10      	pop	{r4, pc}
     80c:	20000090 	.word	0x20000090

00000810 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     810:	b5f0      	push	{r4, r5, r6, r7, lr}
     812:	46de      	mov	lr, fp
     814:	4657      	mov	r7, sl
     816:	464e      	mov	r6, r9
     818:	4645      	mov	r5, r8
     81a:	b5e0      	push	{r5, r6, r7, lr}
     81c:	b091      	sub	sp, #68	; 0x44
     81e:	0005      	movs	r5, r0
     820:	000c      	movs	r4, r1
     822:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     824:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     826:	0008      	movs	r0, r1
     828:	4bbc      	ldr	r3, [pc, #752]	; (b1c <usart_init+0x30c>)
     82a:	4798      	blx	r3
     82c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     82e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     830:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     832:	07db      	lsls	r3, r3, #31
     834:	d506      	bpl.n	844 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     836:	b011      	add	sp, #68	; 0x44
     838:	bc3c      	pop	{r2, r3, r4, r5}
     83a:	4690      	mov	r8, r2
     83c:	4699      	mov	r9, r3
     83e:	46a2      	mov	sl, r4
     840:	46ab      	mov	fp, r5
     842:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     844:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     846:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     848:	079b      	lsls	r3, r3, #30
     84a:	d4f4      	bmi.n	836 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     84c:	49b4      	ldr	r1, [pc, #720]	; (b20 <usart_init+0x310>)
     84e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     850:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     852:	2301      	movs	r3, #1
     854:	40bb      	lsls	r3, r7
     856:	4303      	orrs	r3, r0
     858:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     85a:	a90f      	add	r1, sp, #60	; 0x3c
     85c:	272d      	movs	r7, #45	; 0x2d
     85e:	5df3      	ldrb	r3, [r6, r7]
     860:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     862:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     864:	b2d3      	uxtb	r3, r2
     866:	9302      	str	r3, [sp, #8]
     868:	0018      	movs	r0, r3
     86a:	4bae      	ldr	r3, [pc, #696]	; (b24 <usart_init+0x314>)
     86c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     86e:	9802      	ldr	r0, [sp, #8]
     870:	4bad      	ldr	r3, [pc, #692]	; (b28 <usart_init+0x318>)
     872:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     874:	5df0      	ldrb	r0, [r6, r7]
     876:	2100      	movs	r1, #0
     878:	4bac      	ldr	r3, [pc, #688]	; (b2c <usart_init+0x31c>)
     87a:	4798      	blx	r3
	module->character_size = config->character_size;
     87c:	7af3      	ldrb	r3, [r6, #11]
     87e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     880:	2324      	movs	r3, #36	; 0x24
     882:	5cf3      	ldrb	r3, [r6, r3]
     884:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     886:	2325      	movs	r3, #37	; 0x25
     888:	5cf3      	ldrb	r3, [r6, r3]
     88a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     88c:	7ef3      	ldrb	r3, [r6, #27]
     88e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     890:	7f33      	ldrb	r3, [r6, #28]
     892:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     894:	682b      	ldr	r3, [r5, #0]
     896:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     898:	0018      	movs	r0, r3
     89a:	4ba0      	ldr	r3, [pc, #640]	; (b1c <usart_init+0x30c>)
     89c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     89e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     8a0:	2200      	movs	r2, #0
     8a2:	230e      	movs	r3, #14
     8a4:	a906      	add	r1, sp, #24
     8a6:	468c      	mov	ip, r1
     8a8:	4463      	add	r3, ip
     8aa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     8ac:	8a32      	ldrh	r2, [r6, #16]
     8ae:	9202      	str	r2, [sp, #8]
     8b0:	2380      	movs	r3, #128	; 0x80
     8b2:	01db      	lsls	r3, r3, #7
     8b4:	429a      	cmp	r2, r3
     8b6:	d100      	bne.n	8ba <usart_init+0xaa>
     8b8:	e09e      	b.n	9f8 <usart_init+0x1e8>
     8ba:	d90f      	bls.n	8dc <usart_init+0xcc>
     8bc:	23c0      	movs	r3, #192	; 0xc0
     8be:	01db      	lsls	r3, r3, #7
     8c0:	9a02      	ldr	r2, [sp, #8]
     8c2:	429a      	cmp	r2, r3
     8c4:	d100      	bne.n	8c8 <usart_init+0xb8>
     8c6:	e092      	b.n	9ee <usart_init+0x1de>
     8c8:	2380      	movs	r3, #128	; 0x80
     8ca:	021b      	lsls	r3, r3, #8
     8cc:	429a      	cmp	r2, r3
     8ce:	d000      	beq.n	8d2 <usart_init+0xc2>
     8d0:	e11f      	b.n	b12 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8d2:	2303      	movs	r3, #3
     8d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8d6:	2300      	movs	r3, #0
     8d8:	9307      	str	r3, [sp, #28]
     8da:	e008      	b.n	8ee <usart_init+0xde>
	switch (config->sample_rate) {
     8dc:	2380      	movs	r3, #128	; 0x80
     8de:	019b      	lsls	r3, r3, #6
     8e0:	429a      	cmp	r2, r3
     8e2:	d000      	beq.n	8e6 <usart_init+0xd6>
     8e4:	e115      	b.n	b12 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8e6:	2310      	movs	r3, #16
     8e8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8ea:	3b0f      	subs	r3, #15
     8ec:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     8ee:	6833      	ldr	r3, [r6, #0]
     8f0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     8f2:	68f3      	ldr	r3, [r6, #12]
     8f4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     8f6:	6973      	ldr	r3, [r6, #20]
     8f8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8fa:	7e33      	ldrb	r3, [r6, #24]
     8fc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8fe:	2326      	movs	r3, #38	; 0x26
     900:	5cf3      	ldrb	r3, [r6, r3]
     902:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     904:	6873      	ldr	r3, [r6, #4]
     906:	4699      	mov	r9, r3
	switch (transfer_mode)
     908:	2b00      	cmp	r3, #0
     90a:	d100      	bne.n	90e <usart_init+0xfe>
     90c:	e0a0      	b.n	a50 <usart_init+0x240>
     90e:	2380      	movs	r3, #128	; 0x80
     910:	055b      	lsls	r3, r3, #21
     912:	4599      	cmp	r9, r3
     914:	d100      	bne.n	918 <usart_init+0x108>
     916:	e084      	b.n	a22 <usart_init+0x212>
	if(config->encoding_format_enable) {
     918:	7e73      	ldrb	r3, [r6, #25]
     91a:	2b00      	cmp	r3, #0
     91c:	d002      	beq.n	924 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     91e:	7eb3      	ldrb	r3, [r6, #26]
     920:	4642      	mov	r2, r8
     922:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
     924:	682a      	ldr	r2, [r5, #0]
     926:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     928:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     92a:	2b00      	cmp	r3, #0
     92c:	d1fc      	bne.n	928 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     92e:	330e      	adds	r3, #14
     930:	aa06      	add	r2, sp, #24
     932:	4694      	mov	ip, r2
     934:	4463      	add	r3, ip
     936:	881b      	ldrh	r3, [r3, #0]
     938:	4642      	mov	r2, r8
     93a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     93c:	9b05      	ldr	r3, [sp, #20]
     93e:	9a03      	ldr	r2, [sp, #12]
     940:	4313      	orrs	r3, r2
     942:	9a04      	ldr	r2, [sp, #16]
     944:	4313      	orrs	r3, r2
     946:	464a      	mov	r2, r9
     948:	4313      	orrs	r3, r2
     94a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     94c:	465b      	mov	r3, fp
     94e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     950:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     952:	4653      	mov	r3, sl
     954:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     956:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     958:	2327      	movs	r3, #39	; 0x27
     95a:	5cf3      	ldrb	r3, [r6, r3]
     95c:	2b00      	cmp	r3, #0
     95e:	d101      	bne.n	964 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     960:	3304      	adds	r3, #4
     962:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     964:	7e73      	ldrb	r3, [r6, #25]
     966:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     968:	7f32      	ldrb	r2, [r6, #28]
     96a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     96c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     96e:	7f72      	ldrb	r2, [r6, #29]
     970:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     972:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     974:	2224      	movs	r2, #36	; 0x24
     976:	5cb2      	ldrb	r2, [r6, r2]
     978:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     97a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     97c:	2225      	movs	r2, #37	; 0x25
     97e:	5cb2      	ldrb	r2, [r6, r2]
     980:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     982:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     984:	7ab1      	ldrb	r1, [r6, #10]
     986:	7af2      	ldrb	r2, [r6, #11]
     988:	4311      	orrs	r1, r2
     98a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     98c:	8933      	ldrh	r3, [r6, #8]
     98e:	2bff      	cmp	r3, #255	; 0xff
     990:	d100      	bne.n	994 <usart_init+0x184>
     992:	e081      	b.n	a98 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     994:	2280      	movs	r2, #128	; 0x80
     996:	0452      	lsls	r2, r2, #17
     998:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     99a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     99c:	232c      	movs	r3, #44	; 0x2c
     99e:	5cf3      	ldrb	r3, [r6, r3]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d103      	bne.n	9ac <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9a4:	4b62      	ldr	r3, [pc, #392]	; (b30 <usart_init+0x320>)
     9a6:	789b      	ldrb	r3, [r3, #2]
     9a8:	079b      	lsls	r3, r3, #30
     9aa:	d501      	bpl.n	9b0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9ac:	2380      	movs	r3, #128	; 0x80
     9ae:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1fc      	bne.n	9b2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     9b8:	4643      	mov	r3, r8
     9ba:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     9c0:	2b00      	cmp	r3, #0
     9c2:	d1fc      	bne.n	9be <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     9c4:	4643      	mov	r3, r8
     9c6:	601f      	str	r7, [r3, #0]
     9c8:	ab0e      	add	r3, sp, #56	; 0x38
     9ca:	2280      	movs	r2, #128	; 0x80
     9cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9ce:	2200      	movs	r2, #0
     9d0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9d2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9d4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     9d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
     9d8:	930a      	str	r3, [sp, #40]	; 0x28
     9da:	6b73      	ldr	r3, [r6, #52]	; 0x34
     9dc:	930b      	str	r3, [sp, #44]	; 0x2c
     9de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     9e0:	930c      	str	r3, [sp, #48]	; 0x30
     9e2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     9e4:	9302      	str	r3, [sp, #8]
     9e6:	930d      	str	r3, [sp, #52]	; 0x34
     9e8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9ea:	ae0a      	add	r6, sp, #40	; 0x28
     9ec:	e063      	b.n	ab6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     9ee:	2308      	movs	r3, #8
     9f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9f2:	3b07      	subs	r3, #7
     9f4:	9307      	str	r3, [sp, #28]
     9f6:	e77a      	b.n	8ee <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     9f8:	6833      	ldr	r3, [r6, #0]
     9fa:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     9fc:	68f3      	ldr	r3, [r6, #12]
     9fe:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     a00:	6973      	ldr	r3, [r6, #20]
     a02:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a04:	7e33      	ldrb	r3, [r6, #24]
     a06:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a08:	2326      	movs	r3, #38	; 0x26
     a0a:	5cf3      	ldrb	r3, [r6, r3]
     a0c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a0e:	6873      	ldr	r3, [r6, #4]
     a10:	4699      	mov	r9, r3
	switch (transfer_mode)
     a12:	2b00      	cmp	r3, #0
     a14:	d018      	beq.n	a48 <usart_init+0x238>
     a16:	2380      	movs	r3, #128	; 0x80
     a18:	055b      	lsls	r3, r3, #21
     a1a:	4599      	cmp	r9, r3
     a1c:	d001      	beq.n	a22 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     a1e:	2000      	movs	r0, #0
     a20:	e025      	b.n	a6e <usart_init+0x25e>
			if (!config->use_external_clock) {
     a22:	2327      	movs	r3, #39	; 0x27
     a24:	5cf3      	ldrb	r3, [r6, r3]
     a26:	2b00      	cmp	r3, #0
     a28:	d000      	beq.n	a2c <usart_init+0x21c>
     a2a:	e775      	b.n	918 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a2c:	6a33      	ldr	r3, [r6, #32]
     a2e:	001f      	movs	r7, r3
     a30:	b2c0      	uxtb	r0, r0
     a32:	4b40      	ldr	r3, [pc, #256]	; (b34 <usart_init+0x324>)
     a34:	4798      	blx	r3
     a36:	0001      	movs	r1, r0
     a38:	220e      	movs	r2, #14
     a3a:	ab06      	add	r3, sp, #24
     a3c:	469c      	mov	ip, r3
     a3e:	4462      	add	r2, ip
     a40:	0038      	movs	r0, r7
     a42:	4b3d      	ldr	r3, [pc, #244]	; (b38 <usart_init+0x328>)
     a44:	4798      	blx	r3
     a46:	e012      	b.n	a6e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a48:	2308      	movs	r3, #8
     a4a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a4c:	2300      	movs	r3, #0
     a4e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     a50:	2327      	movs	r3, #39	; 0x27
     a52:	5cf3      	ldrb	r3, [r6, r3]
     a54:	2b00      	cmp	r3, #0
     a56:	d00e      	beq.n	a76 <usart_init+0x266>
				status_code =
     a58:	9b06      	ldr	r3, [sp, #24]
     a5a:	9300      	str	r3, [sp, #0]
     a5c:	9b07      	ldr	r3, [sp, #28]
     a5e:	220e      	movs	r2, #14
     a60:	a906      	add	r1, sp, #24
     a62:	468c      	mov	ip, r1
     a64:	4462      	add	r2, ip
     a66:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     a68:	6a30      	ldr	r0, [r6, #32]
     a6a:	4f34      	ldr	r7, [pc, #208]	; (b3c <usart_init+0x32c>)
     a6c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     a6e:	2800      	cmp	r0, #0
     a70:	d000      	beq.n	a74 <usart_init+0x264>
     a72:	e6e0      	b.n	836 <usart_init+0x26>
     a74:	e750      	b.n	918 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     a76:	6a33      	ldr	r3, [r6, #32]
     a78:	001f      	movs	r7, r3
     a7a:	b2c0      	uxtb	r0, r0
     a7c:	4b2d      	ldr	r3, [pc, #180]	; (b34 <usart_init+0x324>)
     a7e:	4798      	blx	r3
     a80:	0001      	movs	r1, r0
				status_code =
     a82:	9b06      	ldr	r3, [sp, #24]
     a84:	9300      	str	r3, [sp, #0]
     a86:	9b07      	ldr	r3, [sp, #28]
     a88:	220e      	movs	r2, #14
     a8a:	a806      	add	r0, sp, #24
     a8c:	4684      	mov	ip, r0
     a8e:	4462      	add	r2, ip
     a90:	0038      	movs	r0, r7
     a92:	4f2a      	ldr	r7, [pc, #168]	; (b3c <usart_init+0x32c>)
     a94:	47b8      	blx	r7
     a96:	e7ea      	b.n	a6e <usart_init+0x25e>
		if(config->lin_slave_enable) {
     a98:	7ef3      	ldrb	r3, [r6, #27]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d100      	bne.n	aa0 <usart_init+0x290>
     a9e:	e77d      	b.n	99c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     aa0:	2380      	movs	r3, #128	; 0x80
     aa2:	04db      	lsls	r3, r3, #19
     aa4:	431f      	orrs	r7, r3
     aa6:	e779      	b.n	99c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     aa8:	0020      	movs	r0, r4
     aaa:	4b25      	ldr	r3, [pc, #148]	; (b40 <usart_init+0x330>)
     aac:	4798      	blx	r3
     aae:	e007      	b.n	ac0 <usart_init+0x2b0>
     ab0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     ab2:	2f04      	cmp	r7, #4
     ab4:	d00d      	beq.n	ad2 <usart_init+0x2c2>
     ab6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ab8:	00bb      	lsls	r3, r7, #2
     aba:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     abc:	2800      	cmp	r0, #0
     abe:	d0f3      	beq.n	aa8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     ac0:	1c43      	adds	r3, r0, #1
     ac2:	d0f5      	beq.n	ab0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ac4:	a90e      	add	r1, sp, #56	; 0x38
     ac6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ac8:	0c00      	lsrs	r0, r0, #16
     aca:	b2c0      	uxtb	r0, r0
     acc:	4b1d      	ldr	r3, [pc, #116]	; (b44 <usart_init+0x334>)
     ace:	4798      	blx	r3
     ad0:	e7ee      	b.n	ab0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     ad2:	2300      	movs	r3, #0
     ad4:	60eb      	str	r3, [r5, #12]
     ad6:	612b      	str	r3, [r5, #16]
     ad8:	616b      	str	r3, [r5, #20]
     ada:	61ab      	str	r3, [r5, #24]
     adc:	61eb      	str	r3, [r5, #28]
     ade:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     ae0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     ae2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     ae4:	2200      	movs	r2, #0
     ae6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     ae8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     aea:	3330      	adds	r3, #48	; 0x30
     aec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     aee:	3301      	adds	r3, #1
     af0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     af2:	3301      	adds	r3, #1
     af4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     af6:	3301      	adds	r3, #1
     af8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     afa:	6828      	ldr	r0, [r5, #0]
     afc:	4b07      	ldr	r3, [pc, #28]	; (b1c <usart_init+0x30c>)
     afe:	4798      	blx	r3
     b00:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b02:	4911      	ldr	r1, [pc, #68]	; (b48 <usart_init+0x338>)
     b04:	4b11      	ldr	r3, [pc, #68]	; (b4c <usart_init+0x33c>)
     b06:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b08:	00a4      	lsls	r4, r4, #2
     b0a:	4b11      	ldr	r3, [pc, #68]	; (b50 <usart_init+0x340>)
     b0c:	50e5      	str	r5, [r4, r3]
	return status_code;
     b0e:	2000      	movs	r0, #0
     b10:	e691      	b.n	836 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b12:	2310      	movs	r3, #16
     b14:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b16:	2300      	movs	r3, #0
     b18:	9307      	str	r3, [sp, #28]
     b1a:	e6e8      	b.n	8ee <usart_init+0xde>
     b1c:	00000709 	.word	0x00000709
     b20:	40000400 	.word	0x40000400
     b24:	000013b5 	.word	0x000013b5
     b28:	00001329 	.word	0x00001329
     b2c:	00000545 	.word	0x00000545
     b30:	41002000 	.word	0x41002000
     b34:	000013d1 	.word	0x000013d1
     b38:	00000487 	.word	0x00000487
     b3c:	000004b1 	.word	0x000004b1
     b40:	00000591 	.word	0x00000591
     b44:	000014ad 	.word	0x000014ad
     b48:	00000cc9 	.word	0x00000cc9
     b4c:	00000745 	.word	0x00000745
     b50:	20000210 	.word	0x20000210

00000b54 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b54:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     b56:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     b58:	2a00      	cmp	r2, #0
     b5a:	d101      	bne.n	b60 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b5c:	0018      	movs	r0, r3
     b5e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     b60:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     b62:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b64:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     b66:	2a00      	cmp	r2, #0
     b68:	d1f8      	bne.n	b5c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b6a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     b6c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     b6e:	2a00      	cmp	r2, #0
     b70:	d1fc      	bne.n	b6c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     b72:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b74:	2102      	movs	r1, #2
     b76:	7e1a      	ldrb	r2, [r3, #24]
     b78:	420a      	tst	r2, r1
     b7a:	d0fc      	beq.n	b76 <usart_write_wait+0x22>
	return STATUS_OK;
     b7c:	2300      	movs	r3, #0
     b7e:	e7ed      	b.n	b5c <usart_write_wait+0x8>

00000b80 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     b80:	b5f0      	push	{r4, r5, r6, r7, lr}
     b82:	46ce      	mov	lr, r9
     b84:	4647      	mov	r7, r8
     b86:	b580      	push	{r7, lr}
     b88:	b083      	sub	sp, #12
     b8a:	0005      	movs	r5, r0
     b8c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b8e:	2017      	movs	r0, #23
	if (length == 0) {
     b90:	2a00      	cmp	r2, #0
     b92:	d104      	bne.n	b9e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     b94:	b003      	add	sp, #12
     b96:	bc0c      	pop	{r2, r3}
     b98:	4690      	mov	r8, r2
     b9a:	4699      	mov	r9, r3
     b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     b9e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     ba0:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     ba2:	2b00      	cmp	r3, #0
     ba4:	d0f6      	beq.n	b94 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     ba6:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ba8:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     baa:	2b00      	cmp	r3, #0
     bac:	d1fc      	bne.n	ba8 <usart_write_buffer_wait+0x28>
	while (length--) {
     bae:	3a01      	subs	r2, #1
     bb0:	b293      	uxth	r3, r2
     bb2:	4699      	mov	r9, r3
     bb4:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     bb6:	2701      	movs	r7, #1
	while (length--) {
     bb8:	4b1f      	ldr	r3, [pc, #124]	; (c38 <usart_write_buffer_wait+0xb8>)
     bba:	4698      	mov	r8, r3
     bbc:	e011      	b.n	be2 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     bbe:	1c73      	adds	r3, r6, #1
     bc0:	b29b      	uxth	r3, r3
     bc2:	9a01      	ldr	r2, [sp, #4]
     bc4:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bc6:	796a      	ldrb	r2, [r5, #5]
     bc8:	2a01      	cmp	r2, #1
     bca:	d017      	beq.n	bfc <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     bcc:	b289      	uxth	r1, r1
     bce:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     bd0:	0028      	movs	r0, r5
     bd2:	4b1a      	ldr	r3, [pc, #104]	; (c3c <usart_write_buffer_wait+0xbc>)
     bd4:	4798      	blx	r3
	while (length--) {
     bd6:	464b      	mov	r3, r9
     bd8:	3b01      	subs	r3, #1
     bda:	b29b      	uxth	r3, r3
     bdc:	4699      	mov	r9, r3
     bde:	4543      	cmp	r3, r8
     be0:	d013      	beq.n	c0a <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     be2:	7e23      	ldrb	r3, [r4, #24]
     be4:	423b      	tst	r3, r7
     be6:	d1ea      	bne.n	bbe <usart_write_buffer_wait+0x3e>
     be8:	4b13      	ldr	r3, [pc, #76]	; (c38 <usart_write_buffer_wait+0xb8>)
     bea:	7e22      	ldrb	r2, [r4, #24]
     bec:	423a      	tst	r2, r7
     bee:	d1e6      	bne.n	bbe <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     bf0:	2b01      	cmp	r3, #1
     bf2:	d019      	beq.n	c28 <usart_write_buffer_wait+0xa8>
     bf4:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     bf6:	2b00      	cmp	r3, #0
     bf8:	d1f7      	bne.n	bea <usart_write_buffer_wait+0x6a>
     bfa:	e7e0      	b.n	bbe <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     bfc:	3602      	adds	r6, #2
     bfe:	b2b6      	uxth	r6, r6
     c00:	9a01      	ldr	r2, [sp, #4]
     c02:	5cd3      	ldrb	r3, [r2, r3]
     c04:	021b      	lsls	r3, r3, #8
     c06:	4319      	orrs	r1, r3
     c08:	e7e2      	b.n	bd0 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     c0a:	7e23      	ldrb	r3, [r4, #24]
     c0c:	079b      	lsls	r3, r3, #30
     c0e:	d40d      	bmi.n	c2c <usart_write_buffer_wait+0xac>
     c10:	4b09      	ldr	r3, [pc, #36]	; (c38 <usart_write_buffer_wait+0xb8>)
     c12:	2102      	movs	r1, #2
     c14:	7e22      	ldrb	r2, [r4, #24]
     c16:	420a      	tst	r2, r1
     c18:	d10a      	bne.n	c30 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     c1a:	2b01      	cmp	r3, #1
     c1c:	d00a      	beq.n	c34 <usart_write_buffer_wait+0xb4>
     c1e:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c20:	2b00      	cmp	r3, #0
     c22:	d1f7      	bne.n	c14 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     c24:	2000      	movs	r0, #0
     c26:	e7b5      	b.n	b94 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     c28:	2012      	movs	r0, #18
     c2a:	e7b3      	b.n	b94 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     c2c:	2000      	movs	r0, #0
     c2e:	e7b1      	b.n	b94 <usart_write_buffer_wait+0x14>
     c30:	2000      	movs	r0, #0
     c32:	e7af      	b.n	b94 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     c34:	2012      	movs	r0, #18
     c36:	e7ad      	b.n	b94 <usart_write_buffer_wait+0x14>
     c38:	0000ffff 	.word	0x0000ffff
     c3c:	00000b55 	.word	0x00000b55

00000c40 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c42:	0004      	movs	r4, r0
     c44:	000d      	movs	r5, r1
     c46:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c48:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     c4a:	4b0f      	ldr	r3, [pc, #60]	; (c88 <_usart_read_buffer+0x48>)
     c4c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     c4e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     c50:	b29b      	uxth	r3, r3
     c52:	2b00      	cmp	r3, #0
     c54:	d003      	beq.n	c5e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     c56:	4b0d      	ldr	r3, [pc, #52]	; (c8c <_usart_read_buffer+0x4c>)
     c58:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     c5a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     c5e:	85a6      	strh	r6, [r4, #44]	; 0x2c
     c60:	4b0a      	ldr	r3, [pc, #40]	; (c8c <_usart_read_buffer+0x4c>)
     c62:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     c64:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     c66:	2205      	movs	r2, #5
     c68:	2332      	movs	r3, #50	; 0x32
     c6a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     c6c:	3b2e      	subs	r3, #46	; 0x2e
     c6e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     c70:	7a23      	ldrb	r3, [r4, #8]
     c72:	2b00      	cmp	r3, #0
     c74:	d001      	beq.n	c7a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     c76:	2320      	movs	r3, #32
     c78:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     c7a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     c7c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     c7e:	2b00      	cmp	r3, #0
     c80:	d0ec      	beq.n	c5c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     c82:	2308      	movs	r3, #8
     c84:	75bb      	strb	r3, [r7, #22]
     c86:	e7e9      	b.n	c5c <_usart_read_buffer+0x1c>
     c88:	00000301 	.word	0x00000301
     c8c:	00000341 	.word	0x00000341

00000c90 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     c90:	1c93      	adds	r3, r2, #2
     c92:	009b      	lsls	r3, r3, #2
     c94:	18c3      	adds	r3, r0, r3
     c96:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     c98:	2130      	movs	r1, #48	; 0x30
     c9a:	2301      	movs	r3, #1
     c9c:	4093      	lsls	r3, r2
     c9e:	001a      	movs	r2, r3
     ca0:	5c43      	ldrb	r3, [r0, r1]
     ca2:	4313      	orrs	r3, r2
     ca4:	5443      	strb	r3, [r0, r1]
}
     ca6:	4770      	bx	lr

00000ca8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     ca8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     caa:	2317      	movs	r3, #23
	if (length == 0) {
     cac:	2a00      	cmp	r2, #0
     cae:	d101      	bne.n	cb4 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     cb0:	0018      	movs	r0, r3
     cb2:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     cb4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     cb6:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     cb8:	2c00      	cmp	r4, #0
     cba:	d0f9      	beq.n	cb0 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     cbc:	4b01      	ldr	r3, [pc, #4]	; (cc4 <usart_read_buffer_job+0x1c>)
     cbe:	4798      	blx	r3
     cc0:	0003      	movs	r3, r0
     cc2:	e7f5      	b.n	cb0 <usart_read_buffer_job+0x8>
     cc4:	00000c41 	.word	0x00000c41

00000cc8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     cca:	0080      	lsls	r0, r0, #2
     ccc:	4b62      	ldr	r3, [pc, #392]	; (e58 <_usart_interrupt_handler+0x190>)
     cce:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     cd0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     cd2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     cd4:	2b00      	cmp	r3, #0
     cd6:	d1fc      	bne.n	cd2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     cd8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     cda:	7da6      	ldrb	r6, [r4, #22]
     cdc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     cde:	2330      	movs	r3, #48	; 0x30
     ce0:	5ceb      	ldrb	r3, [r5, r3]
     ce2:	2231      	movs	r2, #49	; 0x31
     ce4:	5caf      	ldrb	r7, [r5, r2]
     ce6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ce8:	07f3      	lsls	r3, r6, #31
     cea:	d522      	bpl.n	d32 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     cec:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cee:	b29b      	uxth	r3, r3
     cf0:	2b00      	cmp	r3, #0
     cf2:	d01c      	beq.n	d2e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cf4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     cf6:	7813      	ldrb	r3, [r2, #0]
     cf8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cfa:	1c51      	adds	r1, r2, #1
     cfc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cfe:	7969      	ldrb	r1, [r5, #5]
     d00:	2901      	cmp	r1, #1
     d02:	d00e      	beq.n	d22 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     d04:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     d06:	05db      	lsls	r3, r3, #23
     d08:	0ddb      	lsrs	r3, r3, #23
     d0a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     d0c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     d0e:	3b01      	subs	r3, #1
     d10:	b29b      	uxth	r3, r3
     d12:	85eb      	strh	r3, [r5, #46]	; 0x2e
     d14:	2b00      	cmp	r3, #0
     d16:	d10c      	bne.n	d32 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d18:	3301      	adds	r3, #1
     d1a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     d1c:	3301      	adds	r3, #1
     d1e:	75a3      	strb	r3, [r4, #22]
     d20:	e007      	b.n	d32 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     d22:	7851      	ldrb	r1, [r2, #1]
     d24:	0209      	lsls	r1, r1, #8
     d26:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     d28:	3202      	adds	r2, #2
     d2a:	62aa      	str	r2, [r5, #40]	; 0x28
     d2c:	e7eb      	b.n	d06 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d2e:	2301      	movs	r3, #1
     d30:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     d32:	07b3      	lsls	r3, r6, #30
     d34:	d506      	bpl.n	d44 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     d36:	2302      	movs	r3, #2
     d38:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     d3a:	2200      	movs	r2, #0
     d3c:	3331      	adds	r3, #49	; 0x31
     d3e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     d40:	07fb      	lsls	r3, r7, #31
     d42:	d41a      	bmi.n	d7a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     d44:	0773      	lsls	r3, r6, #29
     d46:	d565      	bpl.n	e14 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     d48:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d4a:	b29b      	uxth	r3, r3
     d4c:	2b00      	cmp	r3, #0
     d4e:	d05f      	beq.n	e10 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d50:	8b63      	ldrh	r3, [r4, #26]
     d52:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d54:	071a      	lsls	r2, r3, #28
     d56:	d414      	bmi.n	d82 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d58:	223f      	movs	r2, #63	; 0x3f
     d5a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d5c:	2b00      	cmp	r3, #0
     d5e:	d034      	beq.n	dca <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d60:	079a      	lsls	r2, r3, #30
     d62:	d511      	bpl.n	d88 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d64:	221a      	movs	r2, #26
     d66:	2332      	movs	r3, #50	; 0x32
     d68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d6a:	3b30      	subs	r3, #48	; 0x30
     d6c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d6e:	077b      	lsls	r3, r7, #29
     d70:	d550      	bpl.n	e14 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d72:	0028      	movs	r0, r5
     d74:	696b      	ldr	r3, [r5, #20]
     d76:	4798      	blx	r3
     d78:	e04c      	b.n	e14 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d7a:	0028      	movs	r0, r5
     d7c:	68eb      	ldr	r3, [r5, #12]
     d7e:	4798      	blx	r3
     d80:	e7e0      	b.n	d44 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d82:	2237      	movs	r2, #55	; 0x37
     d84:	4013      	ands	r3, r2
     d86:	e7e9      	b.n	d5c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d88:	075a      	lsls	r2, r3, #29
     d8a:	d505      	bpl.n	d98 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     d8c:	221e      	movs	r2, #30
     d8e:	2332      	movs	r3, #50	; 0x32
     d90:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d92:	3b2e      	subs	r3, #46	; 0x2e
     d94:	8363      	strh	r3, [r4, #26]
     d96:	e7ea      	b.n	d6e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d98:	07da      	lsls	r2, r3, #31
     d9a:	d505      	bpl.n	da8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d9c:	2213      	movs	r2, #19
     d9e:	2332      	movs	r3, #50	; 0x32
     da0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     da2:	3b31      	subs	r3, #49	; 0x31
     da4:	8363      	strh	r3, [r4, #26]
     da6:	e7e2      	b.n	d6e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     da8:	06da      	lsls	r2, r3, #27
     daa:	d505      	bpl.n	db8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     dac:	2242      	movs	r2, #66	; 0x42
     dae:	2332      	movs	r3, #50	; 0x32
     db0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     db2:	3b22      	subs	r3, #34	; 0x22
     db4:	8363      	strh	r3, [r4, #26]
     db6:	e7da      	b.n	d6e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     db8:	2220      	movs	r2, #32
     dba:	421a      	tst	r2, r3
     dbc:	d0d7      	beq.n	d6e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     dbe:	3221      	adds	r2, #33	; 0x21
     dc0:	2332      	movs	r3, #50	; 0x32
     dc2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     dc4:	3b12      	subs	r3, #18
     dc6:	8363      	strh	r3, [r4, #26]
     dc8:	e7d1      	b.n	d6e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     dca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     dcc:	05db      	lsls	r3, r3, #23
     dce:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     dd0:	b2da      	uxtb	r2, r3
     dd2:	6a69      	ldr	r1, [r5, #36]	; 0x24
     dd4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     dd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     dd8:	1c51      	adds	r1, r2, #1
     dda:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ddc:	7969      	ldrb	r1, [r5, #5]
     dde:	2901      	cmp	r1, #1
     de0:	d010      	beq.n	e04 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     de2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     de4:	3b01      	subs	r3, #1
     de6:	b29b      	uxth	r3, r3
     de8:	85ab      	strh	r3, [r5, #44]	; 0x2c
     dea:	2b00      	cmp	r3, #0
     dec:	d112      	bne.n	e14 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dee:	3304      	adds	r3, #4
     df0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     df2:	2200      	movs	r2, #0
     df4:	332e      	adds	r3, #46	; 0x2e
     df6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     df8:	07bb      	lsls	r3, r7, #30
     dfa:	d50b      	bpl.n	e14 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     dfc:	0028      	movs	r0, r5
     dfe:	692b      	ldr	r3, [r5, #16]
     e00:	4798      	blx	r3
     e02:	e007      	b.n	e14 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     e04:	0a1b      	lsrs	r3, r3, #8
     e06:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     e08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     e0a:	3301      	adds	r3, #1
     e0c:	626b      	str	r3, [r5, #36]	; 0x24
     e0e:	e7e8      	b.n	de2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e10:	2304      	movs	r3, #4
     e12:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e14:	06f3      	lsls	r3, r6, #27
     e16:	d504      	bpl.n	e22 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     e18:	2310      	movs	r3, #16
     e1a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     e1c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     e1e:	06fb      	lsls	r3, r7, #27
     e20:	d40e      	bmi.n	e40 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     e22:	06b3      	lsls	r3, r6, #26
     e24:	d504      	bpl.n	e30 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     e26:	2320      	movs	r3, #32
     e28:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     e2a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     e2c:	073b      	lsls	r3, r7, #28
     e2e:	d40b      	bmi.n	e48 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e30:	0733      	lsls	r3, r6, #28
     e32:	d504      	bpl.n	e3e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e34:	2308      	movs	r3, #8
     e36:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     e38:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     e3a:	06bb      	lsls	r3, r7, #26
     e3c:	d408      	bmi.n	e50 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     e40:	0028      	movs	r0, r5
     e42:	69eb      	ldr	r3, [r5, #28]
     e44:	4798      	blx	r3
     e46:	e7ec      	b.n	e22 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e48:	0028      	movs	r0, r5
     e4a:	69ab      	ldr	r3, [r5, #24]
     e4c:	4798      	blx	r3
     e4e:	e7ef      	b.n	e30 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e50:	6a2b      	ldr	r3, [r5, #32]
     e52:	0028      	movs	r0, r5
     e54:	4798      	blx	r3
}
     e56:	e7f2      	b.n	e3e <_usart_interrupt_handler+0x176>
     e58:	20000210 	.word	0x20000210

00000e5c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e5c:	b510      	push	{r4, lr}
	switch (clock_source) {
     e5e:	2808      	cmp	r0, #8
     e60:	d803      	bhi.n	e6a <system_clock_source_get_hz+0xe>
     e62:	0080      	lsls	r0, r0, #2
     e64:	4b1c      	ldr	r3, [pc, #112]	; (ed8 <system_clock_source_get_hz+0x7c>)
     e66:	581b      	ldr	r3, [r3, r0]
     e68:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e6a:	2000      	movs	r0, #0
     e6c:	e032      	b.n	ed4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     e6e:	4b1b      	ldr	r3, [pc, #108]	; (edc <system_clock_source_get_hz+0x80>)
     e70:	6918      	ldr	r0, [r3, #16]
     e72:	e02f      	b.n	ed4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e74:	4b1a      	ldr	r3, [pc, #104]	; (ee0 <system_clock_source_get_hz+0x84>)
     e76:	6a1b      	ldr	r3, [r3, #32]
     e78:	059b      	lsls	r3, r3, #22
     e7a:	0f9b      	lsrs	r3, r3, #30
     e7c:	4819      	ldr	r0, [pc, #100]	; (ee4 <system_clock_source_get_hz+0x88>)
     e7e:	40d8      	lsrs	r0, r3
     e80:	e028      	b.n	ed4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     e82:	4b16      	ldr	r3, [pc, #88]	; (edc <system_clock_source_get_hz+0x80>)
     e84:	6958      	ldr	r0, [r3, #20]
     e86:	e025      	b.n	ed4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e88:	4b14      	ldr	r3, [pc, #80]	; (edc <system_clock_source_get_hz+0x80>)
     e8a:	681b      	ldr	r3, [r3, #0]
			return 0;
     e8c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e8e:	079b      	lsls	r3, r3, #30
     e90:	d520      	bpl.n	ed4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e92:	4913      	ldr	r1, [pc, #76]	; (ee0 <system_clock_source_get_hz+0x84>)
     e94:	2210      	movs	r2, #16
     e96:	68cb      	ldr	r3, [r1, #12]
     e98:	421a      	tst	r2, r3
     e9a:	d0fc      	beq.n	e96 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     e9c:	4b0f      	ldr	r3, [pc, #60]	; (edc <system_clock_source_get_hz+0x80>)
     e9e:	681a      	ldr	r2, [r3, #0]
     ea0:	2324      	movs	r3, #36	; 0x24
     ea2:	4013      	ands	r3, r2
     ea4:	2b04      	cmp	r3, #4
     ea6:	d001      	beq.n	eac <system_clock_source_get_hz+0x50>
			return 48000000UL;
     ea8:	480f      	ldr	r0, [pc, #60]	; (ee8 <system_clock_source_get_hz+0x8c>)
     eaa:	e013      	b.n	ed4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     eac:	2000      	movs	r0, #0
     eae:	4b0f      	ldr	r3, [pc, #60]	; (eec <system_clock_source_get_hz+0x90>)
     eb0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     eb2:	4b0a      	ldr	r3, [pc, #40]	; (edc <system_clock_source_get_hz+0x80>)
     eb4:	689b      	ldr	r3, [r3, #8]
     eb6:	041b      	lsls	r3, r3, #16
     eb8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     eba:	4358      	muls	r0, r3
     ebc:	e00a      	b.n	ed4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ebe:	2350      	movs	r3, #80	; 0x50
     ec0:	4a07      	ldr	r2, [pc, #28]	; (ee0 <system_clock_source_get_hz+0x84>)
     ec2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     ec4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ec6:	075b      	lsls	r3, r3, #29
     ec8:	d504      	bpl.n	ed4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     eca:	4b04      	ldr	r3, [pc, #16]	; (edc <system_clock_source_get_hz+0x80>)
     ecc:	68d8      	ldr	r0, [r3, #12]
     ece:	e001      	b.n	ed4 <system_clock_source_get_hz+0x78>
		return 32768UL;
     ed0:	2080      	movs	r0, #128	; 0x80
     ed2:	0200      	lsls	r0, r0, #8
	}
}
     ed4:	bd10      	pop	{r4, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	000020d0 	.word	0x000020d0
     edc:	200000a8 	.word	0x200000a8
     ee0:	40000800 	.word	0x40000800
     ee4:	007a1200 	.word	0x007a1200
     ee8:	02dc6c00 	.word	0x02dc6c00
     eec:	000013d1 	.word	0x000013d1

00000ef0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ef0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ef2:	490c      	ldr	r1, [pc, #48]	; (f24 <system_clock_source_osc8m_set_config+0x34>)
     ef4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ef6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ef8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     efa:	7840      	ldrb	r0, [r0, #1]
     efc:	2201      	movs	r2, #1
     efe:	4010      	ands	r0, r2
     f00:	0180      	lsls	r0, r0, #6
     f02:	2640      	movs	r6, #64	; 0x40
     f04:	43b3      	bics	r3, r6
     f06:	4303      	orrs	r3, r0
     f08:	402a      	ands	r2, r5
     f0a:	01d2      	lsls	r2, r2, #7
     f0c:	2080      	movs	r0, #128	; 0x80
     f0e:	4383      	bics	r3, r0
     f10:	4313      	orrs	r3, r2
     f12:	2203      	movs	r2, #3
     f14:	4022      	ands	r2, r4
     f16:	0212      	lsls	r2, r2, #8
     f18:	4803      	ldr	r0, [pc, #12]	; (f28 <system_clock_source_osc8m_set_config+0x38>)
     f1a:	4003      	ands	r3, r0
     f1c:	4313      	orrs	r3, r2
     f1e:	620b      	str	r3, [r1, #32]
}
     f20:	bd70      	pop	{r4, r5, r6, pc}
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	40000800 	.word	0x40000800
     f28:	fffffcff 	.word	0xfffffcff

00000f2c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2e:	46de      	mov	lr, fp
     f30:	4657      	mov	r7, sl
     f32:	464e      	mov	r6, r9
     f34:	4645      	mov	r5, r8
     f36:	b5e0      	push	{r5, r6, r7, lr}
     f38:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     f3a:	4b26      	ldr	r3, [pc, #152]	; (fd4 <system_clock_source_xosc32k_set_config+0xa8>)
     f3c:	469b      	mov	fp, r3
     f3e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     f40:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     f42:	7800      	ldrb	r0, [r0, #0]
     f44:	4242      	negs	r2, r0
     f46:	4142      	adcs	r2, r0
     f48:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     f4a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     f4c:	78ca      	ldrb	r2, [r1, #3]
     f4e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     f50:	790a      	ldrb	r2, [r1, #4]
     f52:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     f54:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     f56:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     f58:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     f5a:	688a      	ldr	r2, [r1, #8]
     f5c:	491e      	ldr	r1, [pc, #120]	; (fd8 <system_clock_source_xosc32k_set_config+0xac>)
     f5e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     f60:	2101      	movs	r1, #1
     f62:	464a      	mov	r2, r9
     f64:	0092      	lsls	r2, r2, #2
     f66:	4691      	mov	r9, r2
     f68:	2204      	movs	r2, #4
     f6a:	4393      	bics	r3, r2
     f6c:	464a      	mov	r2, r9
     f6e:	4313      	orrs	r3, r2
     f70:	4642      	mov	r2, r8
     f72:	400a      	ands	r2, r1
     f74:	00d2      	lsls	r2, r2, #3
     f76:	4690      	mov	r8, r2
     f78:	2208      	movs	r2, #8
     f7a:	4393      	bics	r3, r2
     f7c:	4642      	mov	r2, r8
     f7e:	4313      	orrs	r3, r2
     f80:	4662      	mov	r2, ip
     f82:	400a      	ands	r2, r1
     f84:	0112      	lsls	r2, r2, #4
     f86:	4694      	mov	ip, r2
     f88:	2210      	movs	r2, #16
     f8a:	4393      	bics	r3, r2
     f8c:	4662      	mov	r2, ip
     f8e:	4313      	orrs	r3, r2
     f90:	4008      	ands	r0, r1
     f92:	0140      	lsls	r0, r0, #5
     f94:	2220      	movs	r2, #32
     f96:	4393      	bics	r3, r2
     f98:	4303      	orrs	r3, r0
     f9a:	400f      	ands	r7, r1
     f9c:	01bf      	lsls	r7, r7, #6
     f9e:	2040      	movs	r0, #64	; 0x40
     fa0:	4383      	bics	r3, r0
     fa2:	433b      	orrs	r3, r7
     fa4:	400e      	ands	r6, r1
     fa6:	01f6      	lsls	r6, r6, #7
     fa8:	3040      	adds	r0, #64	; 0x40
     faa:	4383      	bics	r3, r0
     fac:	4333      	orrs	r3, r6
     fae:	3879      	subs	r0, #121	; 0x79
     fb0:	4005      	ands	r5, r0
     fb2:	022d      	lsls	r5, r5, #8
     fb4:	4809      	ldr	r0, [pc, #36]	; (fdc <system_clock_source_xosc32k_set_config+0xb0>)
     fb6:	4003      	ands	r3, r0
     fb8:	432b      	orrs	r3, r5
     fba:	4021      	ands	r1, r4
     fbc:	0309      	lsls	r1, r1, #12
     fbe:	4808      	ldr	r0, [pc, #32]	; (fe0 <system_clock_source_xosc32k_set_config+0xb4>)
     fc0:	4003      	ands	r3, r0
     fc2:	430b      	orrs	r3, r1
     fc4:	465a      	mov	r2, fp
     fc6:	8293      	strh	r3, [r2, #20]
}
     fc8:	bc3c      	pop	{r2, r3, r4, r5}
     fca:	4690      	mov	r8, r2
     fcc:	4699      	mov	r9, r3
     fce:	46a2      	mov	sl, r4
     fd0:	46ab      	mov	fp, r5
     fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fd4:	40000800 	.word	0x40000800
     fd8:	200000a8 	.word	0x200000a8
     fdc:	fffff8ff 	.word	0xfffff8ff
     fe0:	ffffefff 	.word	0xffffefff

00000fe4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     fe4:	2808      	cmp	r0, #8
     fe6:	d803      	bhi.n	ff0 <system_clock_source_enable+0xc>
     fe8:	0080      	lsls	r0, r0, #2
     fea:	4b25      	ldr	r3, [pc, #148]	; (1080 <system_clock_source_enable+0x9c>)
     fec:	581b      	ldr	r3, [r3, r0]
     fee:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ff0:	2017      	movs	r0, #23
     ff2:	e044      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ff4:	4a23      	ldr	r2, [pc, #140]	; (1084 <system_clock_source_enable+0xa0>)
     ff6:	6a13      	ldr	r3, [r2, #32]
     ff8:	2102      	movs	r1, #2
     ffa:	430b      	orrs	r3, r1
     ffc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     ffe:	2000      	movs	r0, #0
    1000:	e03d      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1002:	4a20      	ldr	r2, [pc, #128]	; (1084 <system_clock_source_enable+0xa0>)
    1004:	6993      	ldr	r3, [r2, #24]
    1006:	2102      	movs	r1, #2
    1008:	430b      	orrs	r3, r1
    100a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    100c:	2000      	movs	r0, #0
		break;
    100e:	e036      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1010:	4a1c      	ldr	r2, [pc, #112]	; (1084 <system_clock_source_enable+0xa0>)
    1012:	8a13      	ldrh	r3, [r2, #16]
    1014:	2102      	movs	r1, #2
    1016:	430b      	orrs	r3, r1
    1018:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    101a:	2000      	movs	r0, #0
		break;
    101c:	e02f      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    101e:	4a19      	ldr	r2, [pc, #100]	; (1084 <system_clock_source_enable+0xa0>)
    1020:	8a93      	ldrh	r3, [r2, #20]
    1022:	2102      	movs	r1, #2
    1024:	430b      	orrs	r3, r1
    1026:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1028:	2000      	movs	r0, #0
		break;
    102a:	e028      	b.n	107e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    102c:	4916      	ldr	r1, [pc, #88]	; (1088 <system_clock_source_enable+0xa4>)
    102e:	680b      	ldr	r3, [r1, #0]
    1030:	2202      	movs	r2, #2
    1032:	4313      	orrs	r3, r2
    1034:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1036:	4b13      	ldr	r3, [pc, #76]	; (1084 <system_clock_source_enable+0xa0>)
    1038:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    103a:	0019      	movs	r1, r3
    103c:	320e      	adds	r2, #14
    103e:	68cb      	ldr	r3, [r1, #12]
    1040:	421a      	tst	r2, r3
    1042:	d0fc      	beq.n	103e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1044:	4a10      	ldr	r2, [pc, #64]	; (1088 <system_clock_source_enable+0xa4>)
    1046:	6891      	ldr	r1, [r2, #8]
    1048:	4b0e      	ldr	r3, [pc, #56]	; (1084 <system_clock_source_enable+0xa0>)
    104a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    104c:	6852      	ldr	r2, [r2, #4]
    104e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1050:	2200      	movs	r2, #0
    1052:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1054:	0019      	movs	r1, r3
    1056:	3210      	adds	r2, #16
    1058:	68cb      	ldr	r3, [r1, #12]
    105a:	421a      	tst	r2, r3
    105c:	d0fc      	beq.n	1058 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <system_clock_source_enable+0xa4>)
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	b29b      	uxth	r3, r3
    1064:	4a07      	ldr	r2, [pc, #28]	; (1084 <system_clock_source_enable+0xa0>)
    1066:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1068:	2000      	movs	r0, #0
    106a:	e008      	b.n	107e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    106c:	4905      	ldr	r1, [pc, #20]	; (1084 <system_clock_source_enable+0xa0>)
    106e:	2244      	movs	r2, #68	; 0x44
    1070:	5c8b      	ldrb	r3, [r1, r2]
    1072:	2002      	movs	r0, #2
    1074:	4303      	orrs	r3, r0
    1076:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1078:	2000      	movs	r0, #0
		break;
    107a:	e000      	b.n	107e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    107c:	2000      	movs	r0, #0
}
    107e:	4770      	bx	lr
    1080:	000020f4 	.word	0x000020f4
    1084:	40000800 	.word	0x40000800
    1088:	200000a8 	.word	0x200000a8

0000108c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    108c:	b5f0      	push	{r4, r5, r6, r7, lr}
    108e:	b089      	sub	sp, #36	; 0x24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1090:	22c2      	movs	r2, #194	; 0xc2
    1092:	00d2      	lsls	r2, r2, #3
    1094:	4b2f      	ldr	r3, [pc, #188]	; (1154 <system_clock_init+0xc8>)
    1096:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1098:	4a2f      	ldr	r2, [pc, #188]	; (1158 <system_clock_init+0xcc>)
    109a:	6853      	ldr	r3, [r2, #4]
    109c:	211e      	movs	r1, #30
    109e:	438b      	bics	r3, r1
    10a0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    10a2:	2302      	movs	r3, #2
    10a4:	466a      	mov	r2, sp
    10a6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10a8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10aa:	4d2c      	ldr	r5, [pc, #176]	; (115c <system_clock_init+0xd0>)
    10ac:	b2e0      	uxtb	r0, r4
    10ae:	4669      	mov	r1, sp
    10b0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10b2:	3401      	adds	r4, #1
    10b4:	2c25      	cmp	r4, #37	; 0x25
    10b6:	d1f9      	bne.n	10ac <system_clock_init+0x20>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    10b8:	a804      	add	r0, sp, #16
    10ba:	2300      	movs	r3, #0
    10bc:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    10be:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	0212      	lsls	r2, r2, #8
    10c4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    10c6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    10c8:	2201      	movs	r2, #1
    10ca:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    10cc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    10ce:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    10d0:	3202      	adds	r2, #2
    10d2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    10d4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    10d6:	4b22      	ldr	r3, [pc, #136]	; (1160 <system_clock_init+0xd4>)
    10d8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    10da:	2005      	movs	r0, #5
    10dc:	4b21      	ldr	r3, [pc, #132]	; (1164 <system_clock_init+0xd8>)
    10de:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    10e0:	491c      	ldr	r1, [pc, #112]	; (1154 <system_clock_init+0xc8>)
    10e2:	2202      	movs	r2, #2
    10e4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    10e6:	421a      	tst	r2, r3
    10e8:	d0fc      	beq.n	10e4 <system_clock_init+0x58>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    10ea:	4a1a      	ldr	r2, [pc, #104]	; (1154 <system_clock_init+0xc8>)
    10ec:	8a93      	ldrh	r3, [r2, #20]
    10ee:	2180      	movs	r1, #128	; 0x80
    10f0:	430b      	orrs	r3, r1
    10f2:	8293      	strh	r3, [r2, #20]
	config->run_in_standby  = false;
    10f4:	a803      	add	r0, sp, #12
    10f6:	2400      	movs	r4, #0
    10f8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10fa:	2501      	movs	r5, #1
    10fc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10fe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1100:	4b19      	ldr	r3, [pc, #100]	; (1168 <system_clock_init+0xdc>)
    1102:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1104:	2006      	movs	r0, #6
    1106:	4b17      	ldr	r3, [pc, #92]	; (1164 <system_clock_init+0xd8>)
    1108:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    110a:	4b18      	ldr	r3, [pc, #96]	; (116c <system_clock_init+0xe0>)
    110c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    110e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1110:	466b      	mov	r3, sp
    1112:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1114:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1116:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1118:	2305      	movs	r3, #5
    111a:	466a      	mov	r2, sp
    111c:	7013      	strb	r3, [r2, #0]
    111e:	4669      	mov	r1, sp
    1120:	2001      	movs	r0, #1
    1122:	4f13      	ldr	r7, [pc, #76]	; (1170 <system_clock_init+0xe4>)
    1124:	47b8      	blx	r7
    1126:	2001      	movs	r0, #1
    1128:	4e12      	ldr	r6, [pc, #72]	; (1174 <system_clock_init+0xe8>)
    112a:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    112c:	4b12      	ldr	r3, [pc, #72]	; (1178 <system_clock_init+0xec>)
    112e:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1130:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1132:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1134:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1136:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1138:	466b      	mov	r3, sp
    113a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    113c:	2306      	movs	r3, #6
    113e:	466a      	mov	r2, sp
    1140:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1142:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1144:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1146:	4669      	mov	r1, sp
    1148:	2000      	movs	r0, #0
    114a:	47b8      	blx	r7
    114c:	2000      	movs	r0, #0
    114e:	47b0      	blx	r6
#endif
}
    1150:	b009      	add	sp, #36	; 0x24
    1152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1154:	40000800 	.word	0x40000800
    1158:	41004000 	.word	0x41004000
    115c:	000013b5 	.word	0x000013b5
    1160:	00000f2d 	.word	0x00000f2d
    1164:	00000fe5 	.word	0x00000fe5
    1168:	00000ef1 	.word	0x00000ef1
    116c:	0000117d 	.word	0x0000117d
    1170:	000011a1 	.word	0x000011a1
    1174:	00001259 	.word	0x00001259
    1178:	40000400 	.word	0x40000400

0000117c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    117c:	4a06      	ldr	r2, [pc, #24]	; (1198 <system_gclk_init+0x1c>)
    117e:	6993      	ldr	r3, [r2, #24]
    1180:	2108      	movs	r1, #8
    1182:	430b      	orrs	r3, r1
    1184:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1186:	2201      	movs	r2, #1
    1188:	4b04      	ldr	r3, [pc, #16]	; (119c <system_gclk_init+0x20>)
    118a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    118c:	0019      	movs	r1, r3
    118e:	780b      	ldrb	r3, [r1, #0]
    1190:	4213      	tst	r3, r2
    1192:	d1fc      	bne.n	118e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1194:	4770      	bx	lr
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	40000400 	.word	0x40000400
    119c:	40000c00 	.word	0x40000c00

000011a0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    11a0:	b570      	push	{r4, r5, r6, lr}
    11a2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    11a4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    11a6:	780d      	ldrb	r5, [r1, #0]
    11a8:	022d      	lsls	r5, r5, #8
    11aa:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    11ac:	784b      	ldrb	r3, [r1, #1]
    11ae:	2b00      	cmp	r3, #0
    11b0:	d002      	beq.n	11b8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    11b2:	2380      	movs	r3, #128	; 0x80
    11b4:	02db      	lsls	r3, r3, #11
    11b6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    11b8:	7a4b      	ldrb	r3, [r1, #9]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d002      	beq.n	11c4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	031b      	lsls	r3, r3, #12
    11c2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    11c4:	6848      	ldr	r0, [r1, #4]
    11c6:	2801      	cmp	r0, #1
    11c8:	d910      	bls.n	11ec <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    11ca:	1e43      	subs	r3, r0, #1
    11cc:	4218      	tst	r0, r3
    11ce:	d134      	bne.n	123a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    11d0:	2802      	cmp	r0, #2
    11d2:	d930      	bls.n	1236 <system_gclk_gen_set_config+0x96>
    11d4:	2302      	movs	r3, #2
    11d6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    11d8:	3201      	adds	r2, #1
						mask <<= 1) {
    11da:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    11dc:	4298      	cmp	r0, r3
    11de:	d8fb      	bhi.n	11d8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11e0:	0212      	lsls	r2, r2, #8
    11e2:	4332      	orrs	r2, r6
    11e4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11e6:	2380      	movs	r3, #128	; 0x80
    11e8:	035b      	lsls	r3, r3, #13
    11ea:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11ec:	7a0b      	ldrb	r3, [r1, #8]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d002      	beq.n	11f8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11f2:	2380      	movs	r3, #128	; 0x80
    11f4:	039b      	lsls	r3, r3, #14
    11f6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11f8:	4a13      	ldr	r2, [pc, #76]	; (1248 <system_gclk_gen_set_config+0xa8>)
    11fa:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    11fc:	b25b      	sxtb	r3, r3
    11fe:	2b00      	cmp	r3, #0
    1200:	dbfb      	blt.n	11fa <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1202:	4b12      	ldr	r3, [pc, #72]	; (124c <system_gclk_gen_set_config+0xac>)
    1204:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1206:	4b12      	ldr	r3, [pc, #72]	; (1250 <system_gclk_gen_set_config+0xb0>)
    1208:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    120a:	4a0f      	ldr	r2, [pc, #60]	; (1248 <system_gclk_gen_set_config+0xa8>)
    120c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    120e:	b25b      	sxtb	r3, r3
    1210:	2b00      	cmp	r3, #0
    1212:	dbfb      	blt.n	120c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1214:	4b0c      	ldr	r3, [pc, #48]	; (1248 <system_gclk_gen_set_config+0xa8>)
    1216:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1218:	001a      	movs	r2, r3
    121a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    121c:	b25b      	sxtb	r3, r3
    121e:	2b00      	cmp	r3, #0
    1220:	dbfb      	blt.n	121a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1222:	4a09      	ldr	r2, [pc, #36]	; (1248 <system_gclk_gen_set_config+0xa8>)
    1224:	6853      	ldr	r3, [r2, #4]
    1226:	2180      	movs	r1, #128	; 0x80
    1228:	0249      	lsls	r1, r1, #9
    122a:	400b      	ands	r3, r1
    122c:	431d      	orrs	r5, r3
    122e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1230:	4b08      	ldr	r3, [pc, #32]	; (1254 <system_gclk_gen_set_config+0xb4>)
    1232:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1234:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1236:	2200      	movs	r2, #0
    1238:	e7d2      	b.n	11e0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    123a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    123c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    123e:	2380      	movs	r3, #128	; 0x80
    1240:	029b      	lsls	r3, r3, #10
    1242:	431d      	orrs	r5, r3
    1244:	e7d2      	b.n	11ec <system_gclk_gen_set_config+0x4c>
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	40000c00 	.word	0x40000c00
    124c:	00000301 	.word	0x00000301
    1250:	40000c08 	.word	0x40000c08
    1254:	00000341 	.word	0x00000341

00001258 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1258:	b510      	push	{r4, lr}
    125a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    125c:	4a0b      	ldr	r2, [pc, #44]	; (128c <system_gclk_gen_enable+0x34>)
    125e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1260:	b25b      	sxtb	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	dbfb      	blt.n	125e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1266:	4b0a      	ldr	r3, [pc, #40]	; (1290 <system_gclk_gen_enable+0x38>)
    1268:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    126a:	4b0a      	ldr	r3, [pc, #40]	; (1294 <system_gclk_gen_enable+0x3c>)
    126c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    126e:	4a07      	ldr	r2, [pc, #28]	; (128c <system_gclk_gen_enable+0x34>)
    1270:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1272:	b25b      	sxtb	r3, r3
    1274:	2b00      	cmp	r3, #0
    1276:	dbfb      	blt.n	1270 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1278:	4a04      	ldr	r2, [pc, #16]	; (128c <system_gclk_gen_enable+0x34>)
    127a:	6851      	ldr	r1, [r2, #4]
    127c:	2380      	movs	r3, #128	; 0x80
    127e:	025b      	lsls	r3, r3, #9
    1280:	430b      	orrs	r3, r1
    1282:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1284:	4b04      	ldr	r3, [pc, #16]	; (1298 <system_gclk_gen_enable+0x40>)
    1286:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1288:	bd10      	pop	{r4, pc}
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	40000c00 	.word	0x40000c00
    1290:	00000301 	.word	0x00000301
    1294:	40000c04 	.word	0x40000c04
    1298:	00000341 	.word	0x00000341

0000129c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    129c:	b570      	push	{r4, r5, r6, lr}
    129e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12a0:	4a1a      	ldr	r2, [pc, #104]	; (130c <system_gclk_gen_get_hz+0x70>)
    12a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12a4:	b25b      	sxtb	r3, r3
    12a6:	2b00      	cmp	r3, #0
    12a8:	dbfb      	blt.n	12a2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    12aa:	4b19      	ldr	r3, [pc, #100]	; (1310 <system_gclk_gen_get_hz+0x74>)
    12ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ae:	4b19      	ldr	r3, [pc, #100]	; (1314 <system_gclk_gen_get_hz+0x78>)
    12b0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12b2:	4a16      	ldr	r2, [pc, #88]	; (130c <system_gclk_gen_get_hz+0x70>)
    12b4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12b6:	b25b      	sxtb	r3, r3
    12b8:	2b00      	cmp	r3, #0
    12ba:	dbfb      	blt.n	12b4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    12bc:	4e13      	ldr	r6, [pc, #76]	; (130c <system_gclk_gen_get_hz+0x70>)
    12be:	6870      	ldr	r0, [r6, #4]
    12c0:	04c0      	lsls	r0, r0, #19
    12c2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    12c4:	4b14      	ldr	r3, [pc, #80]	; (1318 <system_gclk_gen_get_hz+0x7c>)
    12c6:	4798      	blx	r3
    12c8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    12ca:	4b12      	ldr	r3, [pc, #72]	; (1314 <system_gclk_gen_get_hz+0x78>)
    12cc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    12ce:	6876      	ldr	r6, [r6, #4]
    12d0:	02f6      	lsls	r6, r6, #11
    12d2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12d4:	4b11      	ldr	r3, [pc, #68]	; (131c <system_gclk_gen_get_hz+0x80>)
    12d6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12d8:	4a0c      	ldr	r2, [pc, #48]	; (130c <system_gclk_gen_get_hz+0x70>)
    12da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12dc:	b25b      	sxtb	r3, r3
    12de:	2b00      	cmp	r3, #0
    12e0:	dbfb      	blt.n	12da <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    12e2:	4b0a      	ldr	r3, [pc, #40]	; (130c <system_gclk_gen_get_hz+0x70>)
    12e4:	689c      	ldr	r4, [r3, #8]
    12e6:	0224      	lsls	r4, r4, #8
    12e8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    12ea:	4b0d      	ldr	r3, [pc, #52]	; (1320 <system_gclk_gen_get_hz+0x84>)
    12ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12ee:	2e00      	cmp	r6, #0
    12f0:	d107      	bne.n	1302 <system_gclk_gen_get_hz+0x66>
    12f2:	2c01      	cmp	r4, #1
    12f4:	d907      	bls.n	1306 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    12f6:	0021      	movs	r1, r4
    12f8:	0028      	movs	r0, r5
    12fa:	4b0a      	ldr	r3, [pc, #40]	; (1324 <system_gclk_gen_get_hz+0x88>)
    12fc:	4798      	blx	r3
    12fe:	0005      	movs	r5, r0
    1300:	e001      	b.n	1306 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1302:	3401      	adds	r4, #1
    1304:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1306:	0028      	movs	r0, r5
    1308:	bd70      	pop	{r4, r5, r6, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	40000c00 	.word	0x40000c00
    1310:	00000301 	.word	0x00000301
    1314:	40000c04 	.word	0x40000c04
    1318:	00000e5d 	.word	0x00000e5d
    131c:	40000c08 	.word	0x40000c08
    1320:	00000341 	.word	0x00000341
    1324:	00001665 	.word	0x00001665

00001328 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1328:	b510      	push	{r4, lr}
    132a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    132c:	4b06      	ldr	r3, [pc, #24]	; (1348 <system_gclk_chan_enable+0x20>)
    132e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1330:	4b06      	ldr	r3, [pc, #24]	; (134c <system_gclk_chan_enable+0x24>)
    1332:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1334:	4a06      	ldr	r2, [pc, #24]	; (1350 <system_gclk_chan_enable+0x28>)
    1336:	8853      	ldrh	r3, [r2, #2]
    1338:	2180      	movs	r1, #128	; 0x80
    133a:	01c9      	lsls	r1, r1, #7
    133c:	430b      	orrs	r3, r1
    133e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1340:	4b04      	ldr	r3, [pc, #16]	; (1354 <system_gclk_chan_enable+0x2c>)
    1342:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1344:	bd10      	pop	{r4, pc}
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	00000301 	.word	0x00000301
    134c:	40000c02 	.word	0x40000c02
    1350:	40000c00 	.word	0x40000c00
    1354:	00000341 	.word	0x00000341

00001358 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1358:	b510      	push	{r4, lr}
    135a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    135c:	4b0f      	ldr	r3, [pc, #60]	; (139c <system_gclk_chan_disable+0x44>)
    135e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1360:	4b0f      	ldr	r3, [pc, #60]	; (13a0 <system_gclk_chan_disable+0x48>)
    1362:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1364:	4a0f      	ldr	r2, [pc, #60]	; (13a4 <system_gclk_chan_disable+0x4c>)
    1366:	8853      	ldrh	r3, [r2, #2]
    1368:	051b      	lsls	r3, r3, #20
    136a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    136c:	8853      	ldrh	r3, [r2, #2]
    136e:	490e      	ldr	r1, [pc, #56]	; (13a8 <system_gclk_chan_disable+0x50>)
    1370:	400b      	ands	r3, r1
    1372:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1374:	8853      	ldrh	r3, [r2, #2]
    1376:	490d      	ldr	r1, [pc, #52]	; (13ac <system_gclk_chan_disable+0x54>)
    1378:	400b      	ands	r3, r1
    137a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    137c:	0011      	movs	r1, r2
    137e:	2280      	movs	r2, #128	; 0x80
    1380:	01d2      	lsls	r2, r2, #7
    1382:	884b      	ldrh	r3, [r1, #2]
    1384:	4213      	tst	r3, r2
    1386:	d1fc      	bne.n	1382 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1388:	4906      	ldr	r1, [pc, #24]	; (13a4 <system_gclk_chan_disable+0x4c>)
    138a:	884a      	ldrh	r2, [r1, #2]
    138c:	0203      	lsls	r3, r0, #8
    138e:	4806      	ldr	r0, [pc, #24]	; (13a8 <system_gclk_chan_disable+0x50>)
    1390:	4002      	ands	r2, r0
    1392:	4313      	orrs	r3, r2
    1394:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1396:	4b06      	ldr	r3, [pc, #24]	; (13b0 <system_gclk_chan_disable+0x58>)
    1398:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    139a:	bd10      	pop	{r4, pc}
    139c:	00000301 	.word	0x00000301
    13a0:	40000c02 	.word	0x40000c02
    13a4:	40000c00 	.word	0x40000c00
    13a8:	fffff0ff 	.word	0xfffff0ff
    13ac:	ffffbfff 	.word	0xffffbfff
    13b0:	00000341 	.word	0x00000341

000013b4 <system_gclk_chan_set_config>:
{
    13b4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    13b6:	780c      	ldrb	r4, [r1, #0]
    13b8:	0224      	lsls	r4, r4, #8
    13ba:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    13bc:	4b02      	ldr	r3, [pc, #8]	; (13c8 <system_gclk_chan_set_config+0x14>)
    13be:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    13c0:	b2a4      	uxth	r4, r4
    13c2:	4b02      	ldr	r3, [pc, #8]	; (13cc <system_gclk_chan_set_config+0x18>)
    13c4:	805c      	strh	r4, [r3, #2]
}
    13c6:	bd10      	pop	{r4, pc}
    13c8:	00001359 	.word	0x00001359
    13cc:	40000c00 	.word	0x40000c00

000013d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    13d0:	b510      	push	{r4, lr}
    13d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13d4:	4b06      	ldr	r3, [pc, #24]	; (13f0 <system_gclk_chan_get_hz+0x20>)
    13d6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13d8:	4b06      	ldr	r3, [pc, #24]	; (13f4 <system_gclk_chan_get_hz+0x24>)
    13da:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    13dc:	4b06      	ldr	r3, [pc, #24]	; (13f8 <system_gclk_chan_get_hz+0x28>)
    13de:	885c      	ldrh	r4, [r3, #2]
    13e0:	0524      	lsls	r4, r4, #20
    13e2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    13e4:	4b05      	ldr	r3, [pc, #20]	; (13fc <system_gclk_chan_get_hz+0x2c>)
    13e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13e8:	0020      	movs	r0, r4
    13ea:	4b05      	ldr	r3, [pc, #20]	; (1400 <system_gclk_chan_get_hz+0x30>)
    13ec:	4798      	blx	r3
}
    13ee:	bd10      	pop	{r4, pc}
    13f0:	00000301 	.word	0x00000301
    13f4:	40000c02 	.word	0x40000c02
    13f8:	40000c00 	.word	0x40000c00
    13fc:	00000341 	.word	0x00000341
    1400:	0000129d 	.word	0x0000129d

00001404 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1404:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1406:	78d3      	ldrb	r3, [r2, #3]
    1408:	2b00      	cmp	r3, #0
    140a:	d135      	bne.n	1478 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    140c:	7813      	ldrb	r3, [r2, #0]
    140e:	2b80      	cmp	r3, #128	; 0x80
    1410:	d029      	beq.n	1466 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1412:	061b      	lsls	r3, r3, #24
    1414:	2480      	movs	r4, #128	; 0x80
    1416:	0264      	lsls	r4, r4, #9
    1418:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    141a:	7854      	ldrb	r4, [r2, #1]
    141c:	2502      	movs	r5, #2
    141e:	43ac      	bics	r4, r5
    1420:	d106      	bne.n	1430 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1422:	7894      	ldrb	r4, [r2, #2]
    1424:	2c00      	cmp	r4, #0
    1426:	d120      	bne.n	146a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1428:	2480      	movs	r4, #128	; 0x80
    142a:	02a4      	lsls	r4, r4, #10
    142c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    142e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1430:	7854      	ldrb	r4, [r2, #1]
    1432:	3c01      	subs	r4, #1
    1434:	2c01      	cmp	r4, #1
    1436:	d91c      	bls.n	1472 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1438:	040d      	lsls	r5, r1, #16
    143a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    143c:	24a0      	movs	r4, #160	; 0xa0
    143e:	05e4      	lsls	r4, r4, #23
    1440:	432c      	orrs	r4, r5
    1442:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1444:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1446:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1448:	24d0      	movs	r4, #208	; 0xd0
    144a:	0624      	lsls	r4, r4, #24
    144c:	432c      	orrs	r4, r5
    144e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1450:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1452:	78d4      	ldrb	r4, [r2, #3]
    1454:	2c00      	cmp	r4, #0
    1456:	d122      	bne.n	149e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1458:	035b      	lsls	r3, r3, #13
    145a:	d51c      	bpl.n	1496 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    145c:	7893      	ldrb	r3, [r2, #2]
    145e:	2b01      	cmp	r3, #1
    1460:	d01e      	beq.n	14a0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1462:	6141      	str	r1, [r0, #20]
    1464:	e017      	b.n	1496 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1466:	2300      	movs	r3, #0
    1468:	e7d7      	b.n	141a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    146a:	24c0      	movs	r4, #192	; 0xc0
    146c:	02e4      	lsls	r4, r4, #11
    146e:	4323      	orrs	r3, r4
    1470:	e7dd      	b.n	142e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1472:	4c0d      	ldr	r4, [pc, #52]	; (14a8 <_system_pinmux_config+0xa4>)
    1474:	4023      	ands	r3, r4
    1476:	e7df      	b.n	1438 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1478:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    147a:	040c      	lsls	r4, r1, #16
    147c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    147e:	23a0      	movs	r3, #160	; 0xa0
    1480:	05db      	lsls	r3, r3, #23
    1482:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1484:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1486:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1488:	23d0      	movs	r3, #208	; 0xd0
    148a:	061b      	lsls	r3, r3, #24
    148c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    148e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1490:	78d3      	ldrb	r3, [r2, #3]
    1492:	2b00      	cmp	r3, #0
    1494:	d103      	bne.n	149e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1496:	7853      	ldrb	r3, [r2, #1]
    1498:	3b01      	subs	r3, #1
    149a:	2b01      	cmp	r3, #1
    149c:	d902      	bls.n	14a4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    149e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    14a0:	6181      	str	r1, [r0, #24]
    14a2:	e7f8      	b.n	1496 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    14a4:	6081      	str	r1, [r0, #8]
}
    14a6:	e7fa      	b.n	149e <_system_pinmux_config+0x9a>
    14a8:	fffbffff 	.word	0xfffbffff

000014ac <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    14ac:	b510      	push	{r4, lr}
    14ae:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14b0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14b2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14b4:	2900      	cmp	r1, #0
    14b6:	d104      	bne.n	14c2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    14b8:	0943      	lsrs	r3, r0, #5
    14ba:	01db      	lsls	r3, r3, #7
    14bc:	4905      	ldr	r1, [pc, #20]	; (14d4 <system_pinmux_pin_set_config+0x28>)
    14be:	468c      	mov	ip, r1
    14c0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    14c2:	241f      	movs	r4, #31
    14c4:	4020      	ands	r0, r4
    14c6:	2101      	movs	r1, #1
    14c8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    14ca:	0018      	movs	r0, r3
    14cc:	4b02      	ldr	r3, [pc, #8]	; (14d8 <system_pinmux_pin_set_config+0x2c>)
    14ce:	4798      	blx	r3
}
    14d0:	bd10      	pop	{r4, pc}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	41004400 	.word	0x41004400
    14d8:	00001405 	.word	0x00001405

000014dc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14dc:	4770      	bx	lr
	...

000014e0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    14e0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14e2:	4b05      	ldr	r3, [pc, #20]	; (14f8 <system_init+0x18>)
    14e4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14e6:	4b05      	ldr	r3, [pc, #20]	; (14fc <system_init+0x1c>)
    14e8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14ea:	4b05      	ldr	r3, [pc, #20]	; (1500 <system_init+0x20>)
    14ec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    14ee:	4b05      	ldr	r3, [pc, #20]	; (1504 <system_init+0x24>)
    14f0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    14f2:	4b05      	ldr	r3, [pc, #20]	; (1508 <system_init+0x28>)
    14f4:	4798      	blx	r3
}
    14f6:	bd10      	pop	{r4, pc}
    14f8:	0000108d 	.word	0x0000108d
    14fc:	00000371 	.word	0x00000371
    1500:	000014dd 	.word	0x000014dd
    1504:	000014dd 	.word	0x000014dd
    1508:	000014dd 	.word	0x000014dd

0000150c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    150c:	e7fe      	b.n	150c <Dummy_Handler>
	...

00001510 <Reset_Handler>:
{
    1510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1512:	4a2a      	ldr	r2, [pc, #168]	; (15bc <Reset_Handler+0xac>)
    1514:	4b2a      	ldr	r3, [pc, #168]	; (15c0 <Reset_Handler+0xb0>)
    1516:	429a      	cmp	r2, r3
    1518:	d011      	beq.n	153e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    151a:	001a      	movs	r2, r3
    151c:	4b29      	ldr	r3, [pc, #164]	; (15c4 <Reset_Handler+0xb4>)
    151e:	429a      	cmp	r2, r3
    1520:	d20d      	bcs.n	153e <Reset_Handler+0x2e>
    1522:	4a29      	ldr	r2, [pc, #164]	; (15c8 <Reset_Handler+0xb8>)
    1524:	3303      	adds	r3, #3
    1526:	1a9b      	subs	r3, r3, r2
    1528:	089b      	lsrs	r3, r3, #2
    152a:	3301      	adds	r3, #1
    152c:	009b      	lsls	r3, r3, #2
    152e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1530:	4823      	ldr	r0, [pc, #140]	; (15c0 <Reset_Handler+0xb0>)
    1532:	4922      	ldr	r1, [pc, #136]	; (15bc <Reset_Handler+0xac>)
    1534:	588c      	ldr	r4, [r1, r2]
    1536:	5084      	str	r4, [r0, r2]
    1538:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    153a:	429a      	cmp	r2, r3
    153c:	d1fa      	bne.n	1534 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    153e:	4a23      	ldr	r2, [pc, #140]	; (15cc <Reset_Handler+0xbc>)
    1540:	4b23      	ldr	r3, [pc, #140]	; (15d0 <Reset_Handler+0xc0>)
    1542:	429a      	cmp	r2, r3
    1544:	d20a      	bcs.n	155c <Reset_Handler+0x4c>
    1546:	43d3      	mvns	r3, r2
    1548:	4921      	ldr	r1, [pc, #132]	; (15d0 <Reset_Handler+0xc0>)
    154a:	185b      	adds	r3, r3, r1
    154c:	2103      	movs	r1, #3
    154e:	438b      	bics	r3, r1
    1550:	3304      	adds	r3, #4
    1552:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1554:	2100      	movs	r1, #0
    1556:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1558:	4293      	cmp	r3, r2
    155a:	d1fc      	bne.n	1556 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    155c:	4a1d      	ldr	r2, [pc, #116]	; (15d4 <Reset_Handler+0xc4>)
    155e:	21ff      	movs	r1, #255	; 0xff
    1560:	4b1d      	ldr	r3, [pc, #116]	; (15d8 <Reset_Handler+0xc8>)
    1562:	438b      	bics	r3, r1
    1564:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1566:	39fd      	subs	r1, #253	; 0xfd
    1568:	2390      	movs	r3, #144	; 0x90
    156a:	005b      	lsls	r3, r3, #1
    156c:	4a1b      	ldr	r2, [pc, #108]	; (15dc <Reset_Handler+0xcc>)
    156e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1570:	4a1b      	ldr	r2, [pc, #108]	; (15e0 <Reset_Handler+0xd0>)
    1572:	78d3      	ldrb	r3, [r2, #3]
    1574:	2503      	movs	r5, #3
    1576:	43ab      	bics	r3, r5
    1578:	2402      	movs	r4, #2
    157a:	4323      	orrs	r3, r4
    157c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    157e:	78d3      	ldrb	r3, [r2, #3]
    1580:	270c      	movs	r7, #12
    1582:	43bb      	bics	r3, r7
    1584:	2608      	movs	r6, #8
    1586:	4333      	orrs	r3, r6
    1588:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    158a:	4b16      	ldr	r3, [pc, #88]	; (15e4 <Reset_Handler+0xd4>)
    158c:	7b98      	ldrb	r0, [r3, #14]
    158e:	2230      	movs	r2, #48	; 0x30
    1590:	4390      	bics	r0, r2
    1592:	2220      	movs	r2, #32
    1594:	4310      	orrs	r0, r2
    1596:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1598:	7b99      	ldrb	r1, [r3, #14]
    159a:	43b9      	bics	r1, r7
    159c:	4331      	orrs	r1, r6
    159e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    15a0:	7b9a      	ldrb	r2, [r3, #14]
    15a2:	43aa      	bics	r2, r5
    15a4:	4322      	orrs	r2, r4
    15a6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    15a8:	4a0f      	ldr	r2, [pc, #60]	; (15e8 <Reset_Handler+0xd8>)
    15aa:	6853      	ldr	r3, [r2, #4]
    15ac:	2180      	movs	r1, #128	; 0x80
    15ae:	430b      	orrs	r3, r1
    15b0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    15b2:	4b0e      	ldr	r3, [pc, #56]	; (15ec <Reset_Handler+0xdc>)
    15b4:	4798      	blx	r3
        main();
    15b6:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <Reset_Handler+0xe0>)
    15b8:	4798      	blx	r3
    15ba:	e7fe      	b.n	15ba <Reset_Handler+0xaa>
    15bc:	0000216c 	.word	0x0000216c
    15c0:	20000000 	.word	0x20000000
    15c4:	20000068 	.word	0x20000068
    15c8:	20000004 	.word	0x20000004
    15cc:	20000068 	.word	0x20000068
    15d0:	2000022c 	.word	0x2000022c
    15d4:	e000ed00 	.word	0xe000ed00
    15d8:	00000000 	.word	0x00000000
    15dc:	41007000 	.word	0x41007000
    15e0:	41005000 	.word	0x41005000
    15e4:	41004800 	.word	0x41004800
    15e8:	41004000 	.word	0x41004000
    15ec:	000017d1 	.word	0x000017d1
    15f0:	00001619 	.word	0x00001619

000015f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    15f4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    15f6:	4a06      	ldr	r2, [pc, #24]	; (1610 <_sbrk+0x1c>)
    15f8:	6812      	ldr	r2, [r2, #0]
    15fa:	2a00      	cmp	r2, #0
    15fc:	d004      	beq.n	1608 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    15fe:	4a04      	ldr	r2, [pc, #16]	; (1610 <_sbrk+0x1c>)
    1600:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1602:	18c3      	adds	r3, r0, r3
    1604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1606:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1608:	4902      	ldr	r1, [pc, #8]	; (1614 <_sbrk+0x20>)
    160a:	4a01      	ldr	r2, [pc, #4]	; (1610 <_sbrk+0x1c>)
    160c:	6011      	str	r1, [r2, #0]
    160e:	e7f6      	b.n	15fe <_sbrk+0xa>
    1610:	200000c0 	.word	0x200000c0
    1614:	20002230 	.word	0x20002230

00001618 <main>:
#include "main21.h"
#include "pusart.h"

int main (void)
{
    1618:	b570      	push	{r4, r5, r6, lr}
	system_init();
    161a:	4b0c      	ldr	r3, [pc, #48]	; (164c <main+0x34>)
    161c:	4798      	blx	r3
	cpu_irq_enable();
    161e:	2201      	movs	r2, #1
    1620:	4b0b      	ldr	r3, [pc, #44]	; (1650 <main+0x38>)
    1622:	701a      	strb	r2, [r3, #0]
    1624:	f3bf 8f5f 	dmb	sy
    1628:	b662      	cpsie	i
	system_interrupt_enable_global();
	pusart_init();
    162a:	4b0a      	ldr	r3, [pc, #40]	; (1654 <main+0x3c>)
    162c:	4798      	blx	r3
    162e:	4d0a      	ldr	r5, [pc, #40]	; (1658 <main+0x40>)
	}
}

void services_handler(void)
{
	pusart_service();
    1630:	4c0a      	ldr	r4, [pc, #40]	; (165c <main+0x44>)
    1632:	e003      	b.n	163c <main+0x24>
    1634:	2380      	movs	r3, #128	; 0x80
    1636:	05db      	lsls	r3, r3, #23
    1638:	61ab      	str	r3, [r5, #24]
    163a:	47a0      	blx	r4
	return (port_base->IN.reg & pin_mask);
    163c:	4b08      	ldr	r3, [pc, #32]	; (1660 <main+0x48>)
    163e:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    1640:	041b      	lsls	r3, r3, #16
    1642:	d4f7      	bmi.n	1634 <main+0x1c>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1644:	2380      	movs	r3, #128	; 0x80
    1646:	05db      	lsls	r3, r3, #23
    1648:	616b      	str	r3, [r5, #20]
    164a:	e7f6      	b.n	163a <main+0x22>
    164c:	000014e1 	.word	0x000014e1
    1650:	20000000 	.word	0x20000000
    1654:	000001e9 	.word	0x000001e9
    1658:	41004480 	.word	0x41004480
    165c:	000002e5 	.word	0x000002e5
    1660:	41004400 	.word	0x41004400

00001664 <__udivsi3>:
    1664:	2200      	movs	r2, #0
    1666:	0843      	lsrs	r3, r0, #1
    1668:	428b      	cmp	r3, r1
    166a:	d374      	bcc.n	1756 <__udivsi3+0xf2>
    166c:	0903      	lsrs	r3, r0, #4
    166e:	428b      	cmp	r3, r1
    1670:	d35f      	bcc.n	1732 <__udivsi3+0xce>
    1672:	0a03      	lsrs	r3, r0, #8
    1674:	428b      	cmp	r3, r1
    1676:	d344      	bcc.n	1702 <__udivsi3+0x9e>
    1678:	0b03      	lsrs	r3, r0, #12
    167a:	428b      	cmp	r3, r1
    167c:	d328      	bcc.n	16d0 <__udivsi3+0x6c>
    167e:	0c03      	lsrs	r3, r0, #16
    1680:	428b      	cmp	r3, r1
    1682:	d30d      	bcc.n	16a0 <__udivsi3+0x3c>
    1684:	22ff      	movs	r2, #255	; 0xff
    1686:	0209      	lsls	r1, r1, #8
    1688:	ba12      	rev	r2, r2
    168a:	0c03      	lsrs	r3, r0, #16
    168c:	428b      	cmp	r3, r1
    168e:	d302      	bcc.n	1696 <__udivsi3+0x32>
    1690:	1212      	asrs	r2, r2, #8
    1692:	0209      	lsls	r1, r1, #8
    1694:	d065      	beq.n	1762 <__udivsi3+0xfe>
    1696:	0b03      	lsrs	r3, r0, #12
    1698:	428b      	cmp	r3, r1
    169a:	d319      	bcc.n	16d0 <__udivsi3+0x6c>
    169c:	e000      	b.n	16a0 <__udivsi3+0x3c>
    169e:	0a09      	lsrs	r1, r1, #8
    16a0:	0bc3      	lsrs	r3, r0, #15
    16a2:	428b      	cmp	r3, r1
    16a4:	d301      	bcc.n	16aa <__udivsi3+0x46>
    16a6:	03cb      	lsls	r3, r1, #15
    16a8:	1ac0      	subs	r0, r0, r3
    16aa:	4152      	adcs	r2, r2
    16ac:	0b83      	lsrs	r3, r0, #14
    16ae:	428b      	cmp	r3, r1
    16b0:	d301      	bcc.n	16b6 <__udivsi3+0x52>
    16b2:	038b      	lsls	r3, r1, #14
    16b4:	1ac0      	subs	r0, r0, r3
    16b6:	4152      	adcs	r2, r2
    16b8:	0b43      	lsrs	r3, r0, #13
    16ba:	428b      	cmp	r3, r1
    16bc:	d301      	bcc.n	16c2 <__udivsi3+0x5e>
    16be:	034b      	lsls	r3, r1, #13
    16c0:	1ac0      	subs	r0, r0, r3
    16c2:	4152      	adcs	r2, r2
    16c4:	0b03      	lsrs	r3, r0, #12
    16c6:	428b      	cmp	r3, r1
    16c8:	d301      	bcc.n	16ce <__udivsi3+0x6a>
    16ca:	030b      	lsls	r3, r1, #12
    16cc:	1ac0      	subs	r0, r0, r3
    16ce:	4152      	adcs	r2, r2
    16d0:	0ac3      	lsrs	r3, r0, #11
    16d2:	428b      	cmp	r3, r1
    16d4:	d301      	bcc.n	16da <__udivsi3+0x76>
    16d6:	02cb      	lsls	r3, r1, #11
    16d8:	1ac0      	subs	r0, r0, r3
    16da:	4152      	adcs	r2, r2
    16dc:	0a83      	lsrs	r3, r0, #10
    16de:	428b      	cmp	r3, r1
    16e0:	d301      	bcc.n	16e6 <__udivsi3+0x82>
    16e2:	028b      	lsls	r3, r1, #10
    16e4:	1ac0      	subs	r0, r0, r3
    16e6:	4152      	adcs	r2, r2
    16e8:	0a43      	lsrs	r3, r0, #9
    16ea:	428b      	cmp	r3, r1
    16ec:	d301      	bcc.n	16f2 <__udivsi3+0x8e>
    16ee:	024b      	lsls	r3, r1, #9
    16f0:	1ac0      	subs	r0, r0, r3
    16f2:	4152      	adcs	r2, r2
    16f4:	0a03      	lsrs	r3, r0, #8
    16f6:	428b      	cmp	r3, r1
    16f8:	d301      	bcc.n	16fe <__udivsi3+0x9a>
    16fa:	020b      	lsls	r3, r1, #8
    16fc:	1ac0      	subs	r0, r0, r3
    16fe:	4152      	adcs	r2, r2
    1700:	d2cd      	bcs.n	169e <__udivsi3+0x3a>
    1702:	09c3      	lsrs	r3, r0, #7
    1704:	428b      	cmp	r3, r1
    1706:	d301      	bcc.n	170c <__udivsi3+0xa8>
    1708:	01cb      	lsls	r3, r1, #7
    170a:	1ac0      	subs	r0, r0, r3
    170c:	4152      	adcs	r2, r2
    170e:	0983      	lsrs	r3, r0, #6
    1710:	428b      	cmp	r3, r1
    1712:	d301      	bcc.n	1718 <__udivsi3+0xb4>
    1714:	018b      	lsls	r3, r1, #6
    1716:	1ac0      	subs	r0, r0, r3
    1718:	4152      	adcs	r2, r2
    171a:	0943      	lsrs	r3, r0, #5
    171c:	428b      	cmp	r3, r1
    171e:	d301      	bcc.n	1724 <__udivsi3+0xc0>
    1720:	014b      	lsls	r3, r1, #5
    1722:	1ac0      	subs	r0, r0, r3
    1724:	4152      	adcs	r2, r2
    1726:	0903      	lsrs	r3, r0, #4
    1728:	428b      	cmp	r3, r1
    172a:	d301      	bcc.n	1730 <__udivsi3+0xcc>
    172c:	010b      	lsls	r3, r1, #4
    172e:	1ac0      	subs	r0, r0, r3
    1730:	4152      	adcs	r2, r2
    1732:	08c3      	lsrs	r3, r0, #3
    1734:	428b      	cmp	r3, r1
    1736:	d301      	bcc.n	173c <__udivsi3+0xd8>
    1738:	00cb      	lsls	r3, r1, #3
    173a:	1ac0      	subs	r0, r0, r3
    173c:	4152      	adcs	r2, r2
    173e:	0883      	lsrs	r3, r0, #2
    1740:	428b      	cmp	r3, r1
    1742:	d301      	bcc.n	1748 <__udivsi3+0xe4>
    1744:	008b      	lsls	r3, r1, #2
    1746:	1ac0      	subs	r0, r0, r3
    1748:	4152      	adcs	r2, r2
    174a:	0843      	lsrs	r3, r0, #1
    174c:	428b      	cmp	r3, r1
    174e:	d301      	bcc.n	1754 <__udivsi3+0xf0>
    1750:	004b      	lsls	r3, r1, #1
    1752:	1ac0      	subs	r0, r0, r3
    1754:	4152      	adcs	r2, r2
    1756:	1a41      	subs	r1, r0, r1
    1758:	d200      	bcs.n	175c <__udivsi3+0xf8>
    175a:	4601      	mov	r1, r0
    175c:	4152      	adcs	r2, r2
    175e:	4610      	mov	r0, r2
    1760:	4770      	bx	lr
    1762:	e7ff      	b.n	1764 <__udivsi3+0x100>
    1764:	b501      	push	{r0, lr}
    1766:	2000      	movs	r0, #0
    1768:	f000 f806 	bl	1778 <__aeabi_idiv0>
    176c:	bd02      	pop	{r1, pc}
    176e:	46c0      	nop			; (mov r8, r8)

00001770 <__aeabi_uidivmod>:
    1770:	2900      	cmp	r1, #0
    1772:	d0f7      	beq.n	1764 <__udivsi3+0x100>
    1774:	e776      	b.n	1664 <__udivsi3>
    1776:	4770      	bx	lr

00001778 <__aeabi_idiv0>:
    1778:	4770      	bx	lr
    177a:	46c0      	nop			; (mov r8, r8)

0000177c <__aeabi_lmul>:
    177c:	b5f0      	push	{r4, r5, r6, r7, lr}
    177e:	46ce      	mov	lr, r9
    1780:	4647      	mov	r7, r8
    1782:	0415      	lsls	r5, r2, #16
    1784:	0c2d      	lsrs	r5, r5, #16
    1786:	002e      	movs	r6, r5
    1788:	b580      	push	{r7, lr}
    178a:	0407      	lsls	r7, r0, #16
    178c:	0c14      	lsrs	r4, r2, #16
    178e:	0c3f      	lsrs	r7, r7, #16
    1790:	4699      	mov	r9, r3
    1792:	0c03      	lsrs	r3, r0, #16
    1794:	437e      	muls	r6, r7
    1796:	435d      	muls	r5, r3
    1798:	4367      	muls	r7, r4
    179a:	4363      	muls	r3, r4
    179c:	197f      	adds	r7, r7, r5
    179e:	0c34      	lsrs	r4, r6, #16
    17a0:	19e4      	adds	r4, r4, r7
    17a2:	469c      	mov	ip, r3
    17a4:	42a5      	cmp	r5, r4
    17a6:	d903      	bls.n	17b0 <__aeabi_lmul+0x34>
    17a8:	2380      	movs	r3, #128	; 0x80
    17aa:	025b      	lsls	r3, r3, #9
    17ac:	4698      	mov	r8, r3
    17ae:	44c4      	add	ip, r8
    17b0:	464b      	mov	r3, r9
    17b2:	4351      	muls	r1, r2
    17b4:	4343      	muls	r3, r0
    17b6:	0436      	lsls	r6, r6, #16
    17b8:	0c36      	lsrs	r6, r6, #16
    17ba:	0c25      	lsrs	r5, r4, #16
    17bc:	0424      	lsls	r4, r4, #16
    17be:	4465      	add	r5, ip
    17c0:	19a4      	adds	r4, r4, r6
    17c2:	1859      	adds	r1, r3, r1
    17c4:	1949      	adds	r1, r1, r5
    17c6:	0020      	movs	r0, r4
    17c8:	bc0c      	pop	{r2, r3}
    17ca:	4690      	mov	r8, r2
    17cc:	4699      	mov	r9, r3
    17ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000017d0 <__libc_init_array>:
    17d0:	b570      	push	{r4, r5, r6, lr}
    17d2:	2600      	movs	r6, #0
    17d4:	4d0c      	ldr	r5, [pc, #48]	; (1808 <__libc_init_array+0x38>)
    17d6:	4c0d      	ldr	r4, [pc, #52]	; (180c <__libc_init_array+0x3c>)
    17d8:	1b64      	subs	r4, r4, r5
    17da:	10a4      	asrs	r4, r4, #2
    17dc:	42a6      	cmp	r6, r4
    17de:	d109      	bne.n	17f4 <__libc_init_array+0x24>
    17e0:	2600      	movs	r6, #0
    17e2:	f000 fcb3 	bl	214c <_init>
    17e6:	4d0a      	ldr	r5, [pc, #40]	; (1810 <__libc_init_array+0x40>)
    17e8:	4c0a      	ldr	r4, [pc, #40]	; (1814 <__libc_init_array+0x44>)
    17ea:	1b64      	subs	r4, r4, r5
    17ec:	10a4      	asrs	r4, r4, #2
    17ee:	42a6      	cmp	r6, r4
    17f0:	d105      	bne.n	17fe <__libc_init_array+0x2e>
    17f2:	bd70      	pop	{r4, r5, r6, pc}
    17f4:	00b3      	lsls	r3, r6, #2
    17f6:	58eb      	ldr	r3, [r5, r3]
    17f8:	4798      	blx	r3
    17fa:	3601      	adds	r6, #1
    17fc:	e7ee      	b.n	17dc <__libc_init_array+0xc>
    17fe:	00b3      	lsls	r3, r6, #2
    1800:	58eb      	ldr	r3, [r5, r3]
    1802:	4798      	blx	r3
    1804:	3601      	adds	r6, #1
    1806:	e7f2      	b.n	17ee <__libc_init_array+0x1e>
    1808:	00002158 	.word	0x00002158
    180c:	00002158 	.word	0x00002158
    1810:	00002158 	.word	0x00002158
    1814:	0000215c 	.word	0x0000215c

00001818 <memcpy>:
    1818:	2300      	movs	r3, #0
    181a:	b510      	push	{r4, lr}
    181c:	429a      	cmp	r2, r3
    181e:	d100      	bne.n	1822 <memcpy+0xa>
    1820:	bd10      	pop	{r4, pc}
    1822:	5ccc      	ldrb	r4, [r1, r3]
    1824:	54c4      	strb	r4, [r0, r3]
    1826:	3301      	adds	r3, #1
    1828:	e7f8      	b.n	181c <memcpy+0x4>

0000182a <memset>:
    182a:	0003      	movs	r3, r0
    182c:	1882      	adds	r2, r0, r2
    182e:	4293      	cmp	r3, r2
    1830:	d100      	bne.n	1834 <memset+0xa>
    1832:	4770      	bx	lr
    1834:	7019      	strb	r1, [r3, #0]
    1836:	3301      	adds	r3, #1
    1838:	e7f9      	b.n	182e <memset+0x4>

0000183a <strlen>:
    183a:	2300      	movs	r3, #0
    183c:	5cc2      	ldrb	r2, [r0, r3]
    183e:	3301      	adds	r3, #1
    1840:	2a00      	cmp	r2, #0
    1842:	d1fb      	bne.n	183c <strlen+0x2>
    1844:	1e58      	subs	r0, r3, #1
    1846:	4770      	bx	lr

00001848 <_vsiprintf_r>:
    1848:	b530      	push	{r4, r5, lr}
    184a:	b09b      	sub	sp, #108	; 0x6c
    184c:	9100      	str	r1, [sp, #0]
    184e:	9104      	str	r1, [sp, #16]
    1850:	4908      	ldr	r1, [pc, #32]	; (1874 <_vsiprintf_r+0x2c>)
    1852:	466d      	mov	r5, sp
    1854:	9102      	str	r1, [sp, #8]
    1856:	9105      	str	r1, [sp, #20]
    1858:	2101      	movs	r1, #1
    185a:	2482      	movs	r4, #130	; 0x82
    185c:	4249      	negs	r1, r1
    185e:	81e9      	strh	r1, [r5, #14]
    1860:	00a4      	lsls	r4, r4, #2
    1862:	4669      	mov	r1, sp
    1864:	81ac      	strh	r4, [r5, #12]
    1866:	f000 f875 	bl	1954 <_svfiprintf_r>
    186a:	2300      	movs	r3, #0
    186c:	9a00      	ldr	r2, [sp, #0]
    186e:	7013      	strb	r3, [r2, #0]
    1870:	b01b      	add	sp, #108	; 0x6c
    1872:	bd30      	pop	{r4, r5, pc}
    1874:	7fffffff 	.word	0x7fffffff

00001878 <vsiprintf>:
    1878:	b510      	push	{r4, lr}
    187a:	0013      	movs	r3, r2
    187c:	000a      	movs	r2, r1
    187e:	0001      	movs	r1, r0
    1880:	4802      	ldr	r0, [pc, #8]	; (188c <vsiprintf+0x14>)
    1882:	6800      	ldr	r0, [r0, #0]
    1884:	f7ff ffe0 	bl	1848 <_vsiprintf_r>
    1888:	bd10      	pop	{r4, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	20000004 	.word	0x20000004

00001890 <__ssputs_r>:
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	688e      	ldr	r6, [r1, #8]
    1894:	b085      	sub	sp, #20
    1896:	0007      	movs	r7, r0
    1898:	000c      	movs	r4, r1
    189a:	9203      	str	r2, [sp, #12]
    189c:	9301      	str	r3, [sp, #4]
    189e:	429e      	cmp	r6, r3
    18a0:	d839      	bhi.n	1916 <__ssputs_r+0x86>
    18a2:	2390      	movs	r3, #144	; 0x90
    18a4:	898a      	ldrh	r2, [r1, #12]
    18a6:	00db      	lsls	r3, r3, #3
    18a8:	421a      	tst	r2, r3
    18aa:	d034      	beq.n	1916 <__ssputs_r+0x86>
    18ac:	2503      	movs	r5, #3
    18ae:	6909      	ldr	r1, [r1, #16]
    18b0:	6823      	ldr	r3, [r4, #0]
    18b2:	1a5b      	subs	r3, r3, r1
    18b4:	9302      	str	r3, [sp, #8]
    18b6:	6963      	ldr	r3, [r4, #20]
    18b8:	9802      	ldr	r0, [sp, #8]
    18ba:	435d      	muls	r5, r3
    18bc:	0feb      	lsrs	r3, r5, #31
    18be:	195d      	adds	r5, r3, r5
    18c0:	9b01      	ldr	r3, [sp, #4]
    18c2:	106d      	asrs	r5, r5, #1
    18c4:	3301      	adds	r3, #1
    18c6:	181b      	adds	r3, r3, r0
    18c8:	42ab      	cmp	r3, r5
    18ca:	d900      	bls.n	18ce <__ssputs_r+0x3e>
    18cc:	001d      	movs	r5, r3
    18ce:	0553      	lsls	r3, r2, #21
    18d0:	d532      	bpl.n	1938 <__ssputs_r+0xa8>
    18d2:	0029      	movs	r1, r5
    18d4:	0038      	movs	r0, r7
    18d6:	f000 fb31 	bl	1f3c <_malloc_r>
    18da:	1e06      	subs	r6, r0, #0
    18dc:	d109      	bne.n	18f2 <__ssputs_r+0x62>
    18de:	230c      	movs	r3, #12
    18e0:	603b      	str	r3, [r7, #0]
    18e2:	2340      	movs	r3, #64	; 0x40
    18e4:	2001      	movs	r0, #1
    18e6:	89a2      	ldrh	r2, [r4, #12]
    18e8:	4240      	negs	r0, r0
    18ea:	4313      	orrs	r3, r2
    18ec:	81a3      	strh	r3, [r4, #12]
    18ee:	b005      	add	sp, #20
    18f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18f2:	9a02      	ldr	r2, [sp, #8]
    18f4:	6921      	ldr	r1, [r4, #16]
    18f6:	f7ff ff8f 	bl	1818 <memcpy>
    18fa:	89a3      	ldrh	r3, [r4, #12]
    18fc:	4a14      	ldr	r2, [pc, #80]	; (1950 <__ssputs_r+0xc0>)
    18fe:	401a      	ands	r2, r3
    1900:	2380      	movs	r3, #128	; 0x80
    1902:	4313      	orrs	r3, r2
    1904:	81a3      	strh	r3, [r4, #12]
    1906:	9b02      	ldr	r3, [sp, #8]
    1908:	6126      	str	r6, [r4, #16]
    190a:	18f6      	adds	r6, r6, r3
    190c:	6026      	str	r6, [r4, #0]
    190e:	6165      	str	r5, [r4, #20]
    1910:	9e01      	ldr	r6, [sp, #4]
    1912:	1aed      	subs	r5, r5, r3
    1914:	60a5      	str	r5, [r4, #8]
    1916:	9b01      	ldr	r3, [sp, #4]
    1918:	42b3      	cmp	r3, r6
    191a:	d200      	bcs.n	191e <__ssputs_r+0x8e>
    191c:	001e      	movs	r6, r3
    191e:	0032      	movs	r2, r6
    1920:	9903      	ldr	r1, [sp, #12]
    1922:	6820      	ldr	r0, [r4, #0]
    1924:	f000 faad 	bl	1e82 <memmove>
    1928:	68a3      	ldr	r3, [r4, #8]
    192a:	2000      	movs	r0, #0
    192c:	1b9b      	subs	r3, r3, r6
    192e:	60a3      	str	r3, [r4, #8]
    1930:	6823      	ldr	r3, [r4, #0]
    1932:	199e      	adds	r6, r3, r6
    1934:	6026      	str	r6, [r4, #0]
    1936:	e7da      	b.n	18ee <__ssputs_r+0x5e>
    1938:	002a      	movs	r2, r5
    193a:	0038      	movs	r0, r7
    193c:	f000 fb5c 	bl	1ff8 <_realloc_r>
    1940:	1e06      	subs	r6, r0, #0
    1942:	d1e0      	bne.n	1906 <__ssputs_r+0x76>
    1944:	6921      	ldr	r1, [r4, #16]
    1946:	0038      	movs	r0, r7
    1948:	f000 faae 	bl	1ea8 <_free_r>
    194c:	e7c7      	b.n	18de <__ssputs_r+0x4e>
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	fffffb7f 	.word	0xfffffb7f

00001954 <_svfiprintf_r>:
    1954:	b5f0      	push	{r4, r5, r6, r7, lr}
    1956:	b09f      	sub	sp, #124	; 0x7c
    1958:	9002      	str	r0, [sp, #8]
    195a:	9305      	str	r3, [sp, #20]
    195c:	898b      	ldrh	r3, [r1, #12]
    195e:	000f      	movs	r7, r1
    1960:	0016      	movs	r6, r2
    1962:	061b      	lsls	r3, r3, #24
    1964:	d511      	bpl.n	198a <_svfiprintf_r+0x36>
    1966:	690b      	ldr	r3, [r1, #16]
    1968:	2b00      	cmp	r3, #0
    196a:	d10e      	bne.n	198a <_svfiprintf_r+0x36>
    196c:	2140      	movs	r1, #64	; 0x40
    196e:	f000 fae5 	bl	1f3c <_malloc_r>
    1972:	6038      	str	r0, [r7, #0]
    1974:	6138      	str	r0, [r7, #16]
    1976:	2800      	cmp	r0, #0
    1978:	d105      	bne.n	1986 <_svfiprintf_r+0x32>
    197a:	230c      	movs	r3, #12
    197c:	9a02      	ldr	r2, [sp, #8]
    197e:	3801      	subs	r0, #1
    1980:	6013      	str	r3, [r2, #0]
    1982:	b01f      	add	sp, #124	; 0x7c
    1984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1986:	2340      	movs	r3, #64	; 0x40
    1988:	617b      	str	r3, [r7, #20]
    198a:	2300      	movs	r3, #0
    198c:	ad06      	add	r5, sp, #24
    198e:	616b      	str	r3, [r5, #20]
    1990:	3320      	adds	r3, #32
    1992:	766b      	strb	r3, [r5, #25]
    1994:	3310      	adds	r3, #16
    1996:	76ab      	strb	r3, [r5, #26]
    1998:	0034      	movs	r4, r6
    199a:	7823      	ldrb	r3, [r4, #0]
    199c:	2b00      	cmp	r3, #0
    199e:	d147      	bne.n	1a30 <_svfiprintf_r+0xdc>
    19a0:	1ba3      	subs	r3, r4, r6
    19a2:	9304      	str	r3, [sp, #16]
    19a4:	d00d      	beq.n	19c2 <_svfiprintf_r+0x6e>
    19a6:	1ba3      	subs	r3, r4, r6
    19a8:	0032      	movs	r2, r6
    19aa:	0039      	movs	r1, r7
    19ac:	9802      	ldr	r0, [sp, #8]
    19ae:	f7ff ff6f 	bl	1890 <__ssputs_r>
    19b2:	1c43      	adds	r3, r0, #1
    19b4:	d100      	bne.n	19b8 <_svfiprintf_r+0x64>
    19b6:	e0b5      	b.n	1b24 <_svfiprintf_r+0x1d0>
    19b8:	696a      	ldr	r2, [r5, #20]
    19ba:	9b04      	ldr	r3, [sp, #16]
    19bc:	4694      	mov	ip, r2
    19be:	4463      	add	r3, ip
    19c0:	616b      	str	r3, [r5, #20]
    19c2:	7823      	ldrb	r3, [r4, #0]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d100      	bne.n	19ca <_svfiprintf_r+0x76>
    19c8:	e0ac      	b.n	1b24 <_svfiprintf_r+0x1d0>
    19ca:	2201      	movs	r2, #1
    19cc:	2300      	movs	r3, #0
    19ce:	4252      	negs	r2, r2
    19d0:	606a      	str	r2, [r5, #4]
    19d2:	a902      	add	r1, sp, #8
    19d4:	3254      	adds	r2, #84	; 0x54
    19d6:	1852      	adds	r2, r2, r1
    19d8:	3401      	adds	r4, #1
    19da:	602b      	str	r3, [r5, #0]
    19dc:	60eb      	str	r3, [r5, #12]
    19de:	60ab      	str	r3, [r5, #8]
    19e0:	7013      	strb	r3, [r2, #0]
    19e2:	65ab      	str	r3, [r5, #88]	; 0x58
    19e4:	4e58      	ldr	r6, [pc, #352]	; (1b48 <_svfiprintf_r+0x1f4>)
    19e6:	2205      	movs	r2, #5
    19e8:	7821      	ldrb	r1, [r4, #0]
    19ea:	0030      	movs	r0, r6
    19ec:	f000 fa3e 	bl	1e6c <memchr>
    19f0:	1c62      	adds	r2, r4, #1
    19f2:	2800      	cmp	r0, #0
    19f4:	d120      	bne.n	1a38 <_svfiprintf_r+0xe4>
    19f6:	6829      	ldr	r1, [r5, #0]
    19f8:	06cb      	lsls	r3, r1, #27
    19fa:	d504      	bpl.n	1a06 <_svfiprintf_r+0xb2>
    19fc:	2353      	movs	r3, #83	; 0x53
    19fe:	ae02      	add	r6, sp, #8
    1a00:	3020      	adds	r0, #32
    1a02:	199b      	adds	r3, r3, r6
    1a04:	7018      	strb	r0, [r3, #0]
    1a06:	070b      	lsls	r3, r1, #28
    1a08:	d504      	bpl.n	1a14 <_svfiprintf_r+0xc0>
    1a0a:	2353      	movs	r3, #83	; 0x53
    1a0c:	202b      	movs	r0, #43	; 0x2b
    1a0e:	ae02      	add	r6, sp, #8
    1a10:	199b      	adds	r3, r3, r6
    1a12:	7018      	strb	r0, [r3, #0]
    1a14:	7823      	ldrb	r3, [r4, #0]
    1a16:	2b2a      	cmp	r3, #42	; 0x2a
    1a18:	d016      	beq.n	1a48 <_svfiprintf_r+0xf4>
    1a1a:	2000      	movs	r0, #0
    1a1c:	210a      	movs	r1, #10
    1a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a20:	7822      	ldrb	r2, [r4, #0]
    1a22:	3a30      	subs	r2, #48	; 0x30
    1a24:	2a09      	cmp	r2, #9
    1a26:	d955      	bls.n	1ad4 <_svfiprintf_r+0x180>
    1a28:	2800      	cmp	r0, #0
    1a2a:	d015      	beq.n	1a58 <_svfiprintf_r+0x104>
    1a2c:	9309      	str	r3, [sp, #36]	; 0x24
    1a2e:	e013      	b.n	1a58 <_svfiprintf_r+0x104>
    1a30:	2b25      	cmp	r3, #37	; 0x25
    1a32:	d0b5      	beq.n	19a0 <_svfiprintf_r+0x4c>
    1a34:	3401      	adds	r4, #1
    1a36:	e7b0      	b.n	199a <_svfiprintf_r+0x46>
    1a38:	2301      	movs	r3, #1
    1a3a:	1b80      	subs	r0, r0, r6
    1a3c:	4083      	lsls	r3, r0
    1a3e:	6829      	ldr	r1, [r5, #0]
    1a40:	0014      	movs	r4, r2
    1a42:	430b      	orrs	r3, r1
    1a44:	602b      	str	r3, [r5, #0]
    1a46:	e7cd      	b.n	19e4 <_svfiprintf_r+0x90>
    1a48:	9b05      	ldr	r3, [sp, #20]
    1a4a:	1d18      	adds	r0, r3, #4
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	9005      	str	r0, [sp, #20]
    1a50:	2b00      	cmp	r3, #0
    1a52:	db39      	blt.n	1ac8 <_svfiprintf_r+0x174>
    1a54:	9309      	str	r3, [sp, #36]	; 0x24
    1a56:	0014      	movs	r4, r2
    1a58:	7823      	ldrb	r3, [r4, #0]
    1a5a:	2b2e      	cmp	r3, #46	; 0x2e
    1a5c:	d10b      	bne.n	1a76 <_svfiprintf_r+0x122>
    1a5e:	7863      	ldrb	r3, [r4, #1]
    1a60:	1c62      	adds	r2, r4, #1
    1a62:	2b2a      	cmp	r3, #42	; 0x2a
    1a64:	d13e      	bne.n	1ae4 <_svfiprintf_r+0x190>
    1a66:	9b05      	ldr	r3, [sp, #20]
    1a68:	3402      	adds	r4, #2
    1a6a:	1d1a      	adds	r2, r3, #4
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	9205      	str	r2, [sp, #20]
    1a70:	2b00      	cmp	r3, #0
    1a72:	db34      	blt.n	1ade <_svfiprintf_r+0x18a>
    1a74:	9307      	str	r3, [sp, #28]
    1a76:	4e35      	ldr	r6, [pc, #212]	; (1b4c <_svfiprintf_r+0x1f8>)
    1a78:	7821      	ldrb	r1, [r4, #0]
    1a7a:	2203      	movs	r2, #3
    1a7c:	0030      	movs	r0, r6
    1a7e:	f000 f9f5 	bl	1e6c <memchr>
    1a82:	2800      	cmp	r0, #0
    1a84:	d006      	beq.n	1a94 <_svfiprintf_r+0x140>
    1a86:	2340      	movs	r3, #64	; 0x40
    1a88:	1b80      	subs	r0, r0, r6
    1a8a:	4083      	lsls	r3, r0
    1a8c:	682a      	ldr	r2, [r5, #0]
    1a8e:	3401      	adds	r4, #1
    1a90:	4313      	orrs	r3, r2
    1a92:	602b      	str	r3, [r5, #0]
    1a94:	7821      	ldrb	r1, [r4, #0]
    1a96:	2206      	movs	r2, #6
    1a98:	482d      	ldr	r0, [pc, #180]	; (1b50 <_svfiprintf_r+0x1fc>)
    1a9a:	1c66      	adds	r6, r4, #1
    1a9c:	7629      	strb	r1, [r5, #24]
    1a9e:	f000 f9e5 	bl	1e6c <memchr>
    1aa2:	2800      	cmp	r0, #0
    1aa4:	d046      	beq.n	1b34 <_svfiprintf_r+0x1e0>
    1aa6:	4b2b      	ldr	r3, [pc, #172]	; (1b54 <_svfiprintf_r+0x200>)
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d12f      	bne.n	1b0c <_svfiprintf_r+0x1b8>
    1aac:	6829      	ldr	r1, [r5, #0]
    1aae:	9b05      	ldr	r3, [sp, #20]
    1ab0:	2207      	movs	r2, #7
    1ab2:	05c9      	lsls	r1, r1, #23
    1ab4:	d528      	bpl.n	1b08 <_svfiprintf_r+0x1b4>
    1ab6:	189b      	adds	r3, r3, r2
    1ab8:	4393      	bics	r3, r2
    1aba:	3308      	adds	r3, #8
    1abc:	9305      	str	r3, [sp, #20]
    1abe:	696b      	ldr	r3, [r5, #20]
    1ac0:	9a03      	ldr	r2, [sp, #12]
    1ac2:	189b      	adds	r3, r3, r2
    1ac4:	616b      	str	r3, [r5, #20]
    1ac6:	e767      	b.n	1998 <_svfiprintf_r+0x44>
    1ac8:	425b      	negs	r3, r3
    1aca:	60eb      	str	r3, [r5, #12]
    1acc:	2302      	movs	r3, #2
    1ace:	430b      	orrs	r3, r1
    1ad0:	602b      	str	r3, [r5, #0]
    1ad2:	e7c0      	b.n	1a56 <_svfiprintf_r+0x102>
    1ad4:	434b      	muls	r3, r1
    1ad6:	3401      	adds	r4, #1
    1ad8:	189b      	adds	r3, r3, r2
    1ada:	2001      	movs	r0, #1
    1adc:	e7a0      	b.n	1a20 <_svfiprintf_r+0xcc>
    1ade:	2301      	movs	r3, #1
    1ae0:	425b      	negs	r3, r3
    1ae2:	e7c7      	b.n	1a74 <_svfiprintf_r+0x120>
    1ae4:	2300      	movs	r3, #0
    1ae6:	0014      	movs	r4, r2
    1ae8:	200a      	movs	r0, #10
    1aea:	001a      	movs	r2, r3
    1aec:	606b      	str	r3, [r5, #4]
    1aee:	7821      	ldrb	r1, [r4, #0]
    1af0:	3930      	subs	r1, #48	; 0x30
    1af2:	2909      	cmp	r1, #9
    1af4:	d903      	bls.n	1afe <_svfiprintf_r+0x1aa>
    1af6:	2b00      	cmp	r3, #0
    1af8:	d0bd      	beq.n	1a76 <_svfiprintf_r+0x122>
    1afa:	9207      	str	r2, [sp, #28]
    1afc:	e7bb      	b.n	1a76 <_svfiprintf_r+0x122>
    1afe:	4342      	muls	r2, r0
    1b00:	3401      	adds	r4, #1
    1b02:	1852      	adds	r2, r2, r1
    1b04:	2301      	movs	r3, #1
    1b06:	e7f2      	b.n	1aee <_svfiprintf_r+0x19a>
    1b08:	3307      	adds	r3, #7
    1b0a:	e7d5      	b.n	1ab8 <_svfiprintf_r+0x164>
    1b0c:	ab05      	add	r3, sp, #20
    1b0e:	9300      	str	r3, [sp, #0]
    1b10:	003a      	movs	r2, r7
    1b12:	4b11      	ldr	r3, [pc, #68]	; (1b58 <_svfiprintf_r+0x204>)
    1b14:	0029      	movs	r1, r5
    1b16:	9802      	ldr	r0, [sp, #8]
    1b18:	e000      	b.n	1b1c <_svfiprintf_r+0x1c8>
    1b1a:	bf00      	nop
    1b1c:	9003      	str	r0, [sp, #12]
    1b1e:	9b03      	ldr	r3, [sp, #12]
    1b20:	3301      	adds	r3, #1
    1b22:	d1cc      	bne.n	1abe <_svfiprintf_r+0x16a>
    1b24:	89bb      	ldrh	r3, [r7, #12]
    1b26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1b28:	065b      	lsls	r3, r3, #25
    1b2a:	d400      	bmi.n	1b2e <_svfiprintf_r+0x1da>
    1b2c:	e729      	b.n	1982 <_svfiprintf_r+0x2e>
    1b2e:	2001      	movs	r0, #1
    1b30:	4240      	negs	r0, r0
    1b32:	e726      	b.n	1982 <_svfiprintf_r+0x2e>
    1b34:	ab05      	add	r3, sp, #20
    1b36:	9300      	str	r3, [sp, #0]
    1b38:	003a      	movs	r2, r7
    1b3a:	4b07      	ldr	r3, [pc, #28]	; (1b58 <_svfiprintf_r+0x204>)
    1b3c:	0029      	movs	r1, r5
    1b3e:	9802      	ldr	r0, [sp, #8]
    1b40:	f000 f87a 	bl	1c38 <_printf_i>
    1b44:	e7ea      	b.n	1b1c <_svfiprintf_r+0x1c8>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00002118 	.word	0x00002118
    1b4c:	0000211e 	.word	0x0000211e
    1b50:	00002122 	.word	0x00002122
    1b54:	00000000 	.word	0x00000000
    1b58:	00001891 	.word	0x00001891

00001b5c <_printf_common>:
    1b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1b5e:	0015      	movs	r5, r2
    1b60:	9301      	str	r3, [sp, #4]
    1b62:	688a      	ldr	r2, [r1, #8]
    1b64:	690b      	ldr	r3, [r1, #16]
    1b66:	9000      	str	r0, [sp, #0]
    1b68:	000c      	movs	r4, r1
    1b6a:	4293      	cmp	r3, r2
    1b6c:	da00      	bge.n	1b70 <_printf_common+0x14>
    1b6e:	0013      	movs	r3, r2
    1b70:	0022      	movs	r2, r4
    1b72:	602b      	str	r3, [r5, #0]
    1b74:	3243      	adds	r2, #67	; 0x43
    1b76:	7812      	ldrb	r2, [r2, #0]
    1b78:	2a00      	cmp	r2, #0
    1b7a:	d001      	beq.n	1b80 <_printf_common+0x24>
    1b7c:	3301      	adds	r3, #1
    1b7e:	602b      	str	r3, [r5, #0]
    1b80:	6823      	ldr	r3, [r4, #0]
    1b82:	069b      	lsls	r3, r3, #26
    1b84:	d502      	bpl.n	1b8c <_printf_common+0x30>
    1b86:	682b      	ldr	r3, [r5, #0]
    1b88:	3302      	adds	r3, #2
    1b8a:	602b      	str	r3, [r5, #0]
    1b8c:	2706      	movs	r7, #6
    1b8e:	6823      	ldr	r3, [r4, #0]
    1b90:	401f      	ands	r7, r3
    1b92:	d027      	beq.n	1be4 <_printf_common+0x88>
    1b94:	0023      	movs	r3, r4
    1b96:	3343      	adds	r3, #67	; 0x43
    1b98:	781b      	ldrb	r3, [r3, #0]
    1b9a:	1e5a      	subs	r2, r3, #1
    1b9c:	4193      	sbcs	r3, r2
    1b9e:	6822      	ldr	r2, [r4, #0]
    1ba0:	0692      	lsls	r2, r2, #26
    1ba2:	d430      	bmi.n	1c06 <_printf_common+0xaa>
    1ba4:	0022      	movs	r2, r4
    1ba6:	9901      	ldr	r1, [sp, #4]
    1ba8:	3243      	adds	r2, #67	; 0x43
    1baa:	9800      	ldr	r0, [sp, #0]
    1bac:	9e08      	ldr	r6, [sp, #32]
    1bae:	47b0      	blx	r6
    1bb0:	1c43      	adds	r3, r0, #1
    1bb2:	d025      	beq.n	1c00 <_printf_common+0xa4>
    1bb4:	2306      	movs	r3, #6
    1bb6:	6820      	ldr	r0, [r4, #0]
    1bb8:	682a      	ldr	r2, [r5, #0]
    1bba:	68e1      	ldr	r1, [r4, #12]
    1bbc:	4003      	ands	r3, r0
    1bbe:	2500      	movs	r5, #0
    1bc0:	2b04      	cmp	r3, #4
    1bc2:	d103      	bne.n	1bcc <_printf_common+0x70>
    1bc4:	1a8d      	subs	r5, r1, r2
    1bc6:	43eb      	mvns	r3, r5
    1bc8:	17db      	asrs	r3, r3, #31
    1bca:	401d      	ands	r5, r3
    1bcc:	68a3      	ldr	r3, [r4, #8]
    1bce:	6922      	ldr	r2, [r4, #16]
    1bd0:	4293      	cmp	r3, r2
    1bd2:	dd01      	ble.n	1bd8 <_printf_common+0x7c>
    1bd4:	1a9b      	subs	r3, r3, r2
    1bd6:	18ed      	adds	r5, r5, r3
    1bd8:	2700      	movs	r7, #0
    1bda:	42bd      	cmp	r5, r7
    1bdc:	d120      	bne.n	1c20 <_printf_common+0xc4>
    1bde:	2000      	movs	r0, #0
    1be0:	e010      	b.n	1c04 <_printf_common+0xa8>
    1be2:	3701      	adds	r7, #1
    1be4:	68e3      	ldr	r3, [r4, #12]
    1be6:	682a      	ldr	r2, [r5, #0]
    1be8:	1a9b      	subs	r3, r3, r2
    1bea:	429f      	cmp	r7, r3
    1bec:	dad2      	bge.n	1b94 <_printf_common+0x38>
    1bee:	0022      	movs	r2, r4
    1bf0:	2301      	movs	r3, #1
    1bf2:	3219      	adds	r2, #25
    1bf4:	9901      	ldr	r1, [sp, #4]
    1bf6:	9800      	ldr	r0, [sp, #0]
    1bf8:	9e08      	ldr	r6, [sp, #32]
    1bfa:	47b0      	blx	r6
    1bfc:	1c43      	adds	r3, r0, #1
    1bfe:	d1f0      	bne.n	1be2 <_printf_common+0x86>
    1c00:	2001      	movs	r0, #1
    1c02:	4240      	negs	r0, r0
    1c04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c06:	2030      	movs	r0, #48	; 0x30
    1c08:	18e1      	adds	r1, r4, r3
    1c0a:	3143      	adds	r1, #67	; 0x43
    1c0c:	7008      	strb	r0, [r1, #0]
    1c0e:	0021      	movs	r1, r4
    1c10:	1c5a      	adds	r2, r3, #1
    1c12:	3145      	adds	r1, #69	; 0x45
    1c14:	7809      	ldrb	r1, [r1, #0]
    1c16:	18a2      	adds	r2, r4, r2
    1c18:	3243      	adds	r2, #67	; 0x43
    1c1a:	3302      	adds	r3, #2
    1c1c:	7011      	strb	r1, [r2, #0]
    1c1e:	e7c1      	b.n	1ba4 <_printf_common+0x48>
    1c20:	0022      	movs	r2, r4
    1c22:	2301      	movs	r3, #1
    1c24:	321a      	adds	r2, #26
    1c26:	9901      	ldr	r1, [sp, #4]
    1c28:	9800      	ldr	r0, [sp, #0]
    1c2a:	9e08      	ldr	r6, [sp, #32]
    1c2c:	47b0      	blx	r6
    1c2e:	1c43      	adds	r3, r0, #1
    1c30:	d0e6      	beq.n	1c00 <_printf_common+0xa4>
    1c32:	3701      	adds	r7, #1
    1c34:	e7d1      	b.n	1bda <_printf_common+0x7e>
	...

00001c38 <_printf_i>:
    1c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3a:	b08b      	sub	sp, #44	; 0x2c
    1c3c:	9206      	str	r2, [sp, #24]
    1c3e:	000a      	movs	r2, r1
    1c40:	3243      	adds	r2, #67	; 0x43
    1c42:	9307      	str	r3, [sp, #28]
    1c44:	9005      	str	r0, [sp, #20]
    1c46:	9204      	str	r2, [sp, #16]
    1c48:	7e0a      	ldrb	r2, [r1, #24]
    1c4a:	000c      	movs	r4, r1
    1c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c4e:	2a6e      	cmp	r2, #110	; 0x6e
    1c50:	d100      	bne.n	1c54 <_printf_i+0x1c>
    1c52:	e08f      	b.n	1d74 <_printf_i+0x13c>
    1c54:	d817      	bhi.n	1c86 <_printf_i+0x4e>
    1c56:	2a63      	cmp	r2, #99	; 0x63
    1c58:	d02c      	beq.n	1cb4 <_printf_i+0x7c>
    1c5a:	d808      	bhi.n	1c6e <_printf_i+0x36>
    1c5c:	2a00      	cmp	r2, #0
    1c5e:	d100      	bne.n	1c62 <_printf_i+0x2a>
    1c60:	e099      	b.n	1d96 <_printf_i+0x15e>
    1c62:	2a58      	cmp	r2, #88	; 0x58
    1c64:	d054      	beq.n	1d10 <_printf_i+0xd8>
    1c66:	0026      	movs	r6, r4
    1c68:	3642      	adds	r6, #66	; 0x42
    1c6a:	7032      	strb	r2, [r6, #0]
    1c6c:	e029      	b.n	1cc2 <_printf_i+0x8a>
    1c6e:	2a64      	cmp	r2, #100	; 0x64
    1c70:	d001      	beq.n	1c76 <_printf_i+0x3e>
    1c72:	2a69      	cmp	r2, #105	; 0x69
    1c74:	d1f7      	bne.n	1c66 <_printf_i+0x2e>
    1c76:	6821      	ldr	r1, [r4, #0]
    1c78:	681a      	ldr	r2, [r3, #0]
    1c7a:	0608      	lsls	r0, r1, #24
    1c7c:	d523      	bpl.n	1cc6 <_printf_i+0x8e>
    1c7e:	1d11      	adds	r1, r2, #4
    1c80:	6019      	str	r1, [r3, #0]
    1c82:	6815      	ldr	r5, [r2, #0]
    1c84:	e025      	b.n	1cd2 <_printf_i+0x9a>
    1c86:	2a73      	cmp	r2, #115	; 0x73
    1c88:	d100      	bne.n	1c8c <_printf_i+0x54>
    1c8a:	e088      	b.n	1d9e <_printf_i+0x166>
    1c8c:	d808      	bhi.n	1ca0 <_printf_i+0x68>
    1c8e:	2a6f      	cmp	r2, #111	; 0x6f
    1c90:	d029      	beq.n	1ce6 <_printf_i+0xae>
    1c92:	2a70      	cmp	r2, #112	; 0x70
    1c94:	d1e7      	bne.n	1c66 <_printf_i+0x2e>
    1c96:	2220      	movs	r2, #32
    1c98:	6809      	ldr	r1, [r1, #0]
    1c9a:	430a      	orrs	r2, r1
    1c9c:	6022      	str	r2, [r4, #0]
    1c9e:	e003      	b.n	1ca8 <_printf_i+0x70>
    1ca0:	2a75      	cmp	r2, #117	; 0x75
    1ca2:	d020      	beq.n	1ce6 <_printf_i+0xae>
    1ca4:	2a78      	cmp	r2, #120	; 0x78
    1ca6:	d1de      	bne.n	1c66 <_printf_i+0x2e>
    1ca8:	0022      	movs	r2, r4
    1caa:	2178      	movs	r1, #120	; 0x78
    1cac:	3245      	adds	r2, #69	; 0x45
    1cae:	7011      	strb	r1, [r2, #0]
    1cb0:	4a6c      	ldr	r2, [pc, #432]	; (1e64 <_printf_i+0x22c>)
    1cb2:	e030      	b.n	1d16 <_printf_i+0xde>
    1cb4:	000e      	movs	r6, r1
    1cb6:	681a      	ldr	r2, [r3, #0]
    1cb8:	3642      	adds	r6, #66	; 0x42
    1cba:	1d11      	adds	r1, r2, #4
    1cbc:	6019      	str	r1, [r3, #0]
    1cbe:	6813      	ldr	r3, [r2, #0]
    1cc0:	7033      	strb	r3, [r6, #0]
    1cc2:	2301      	movs	r3, #1
    1cc4:	e079      	b.n	1dba <_printf_i+0x182>
    1cc6:	0649      	lsls	r1, r1, #25
    1cc8:	d5d9      	bpl.n	1c7e <_printf_i+0x46>
    1cca:	1d11      	adds	r1, r2, #4
    1ccc:	6019      	str	r1, [r3, #0]
    1cce:	2300      	movs	r3, #0
    1cd0:	5ed5      	ldrsh	r5, [r2, r3]
    1cd2:	2d00      	cmp	r5, #0
    1cd4:	da03      	bge.n	1cde <_printf_i+0xa6>
    1cd6:	232d      	movs	r3, #45	; 0x2d
    1cd8:	9a04      	ldr	r2, [sp, #16]
    1cda:	426d      	negs	r5, r5
    1cdc:	7013      	strb	r3, [r2, #0]
    1cde:	4b62      	ldr	r3, [pc, #392]	; (1e68 <_printf_i+0x230>)
    1ce0:	270a      	movs	r7, #10
    1ce2:	9303      	str	r3, [sp, #12]
    1ce4:	e02f      	b.n	1d46 <_printf_i+0x10e>
    1ce6:	6820      	ldr	r0, [r4, #0]
    1ce8:	6819      	ldr	r1, [r3, #0]
    1cea:	0605      	lsls	r5, r0, #24
    1cec:	d503      	bpl.n	1cf6 <_printf_i+0xbe>
    1cee:	1d08      	adds	r0, r1, #4
    1cf0:	6018      	str	r0, [r3, #0]
    1cf2:	680d      	ldr	r5, [r1, #0]
    1cf4:	e005      	b.n	1d02 <_printf_i+0xca>
    1cf6:	0640      	lsls	r0, r0, #25
    1cf8:	d5f9      	bpl.n	1cee <_printf_i+0xb6>
    1cfa:	680d      	ldr	r5, [r1, #0]
    1cfc:	1d08      	adds	r0, r1, #4
    1cfe:	6018      	str	r0, [r3, #0]
    1d00:	b2ad      	uxth	r5, r5
    1d02:	4b59      	ldr	r3, [pc, #356]	; (1e68 <_printf_i+0x230>)
    1d04:	2708      	movs	r7, #8
    1d06:	9303      	str	r3, [sp, #12]
    1d08:	2a6f      	cmp	r2, #111	; 0x6f
    1d0a:	d018      	beq.n	1d3e <_printf_i+0x106>
    1d0c:	270a      	movs	r7, #10
    1d0e:	e016      	b.n	1d3e <_printf_i+0x106>
    1d10:	3145      	adds	r1, #69	; 0x45
    1d12:	700a      	strb	r2, [r1, #0]
    1d14:	4a54      	ldr	r2, [pc, #336]	; (1e68 <_printf_i+0x230>)
    1d16:	9203      	str	r2, [sp, #12]
    1d18:	681a      	ldr	r2, [r3, #0]
    1d1a:	6821      	ldr	r1, [r4, #0]
    1d1c:	1d10      	adds	r0, r2, #4
    1d1e:	6018      	str	r0, [r3, #0]
    1d20:	6815      	ldr	r5, [r2, #0]
    1d22:	0608      	lsls	r0, r1, #24
    1d24:	d522      	bpl.n	1d6c <_printf_i+0x134>
    1d26:	07cb      	lsls	r3, r1, #31
    1d28:	d502      	bpl.n	1d30 <_printf_i+0xf8>
    1d2a:	2320      	movs	r3, #32
    1d2c:	4319      	orrs	r1, r3
    1d2e:	6021      	str	r1, [r4, #0]
    1d30:	2710      	movs	r7, #16
    1d32:	2d00      	cmp	r5, #0
    1d34:	d103      	bne.n	1d3e <_printf_i+0x106>
    1d36:	2320      	movs	r3, #32
    1d38:	6822      	ldr	r2, [r4, #0]
    1d3a:	439a      	bics	r2, r3
    1d3c:	6022      	str	r2, [r4, #0]
    1d3e:	0023      	movs	r3, r4
    1d40:	2200      	movs	r2, #0
    1d42:	3343      	adds	r3, #67	; 0x43
    1d44:	701a      	strb	r2, [r3, #0]
    1d46:	6863      	ldr	r3, [r4, #4]
    1d48:	60a3      	str	r3, [r4, #8]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	db5c      	blt.n	1e08 <_printf_i+0x1d0>
    1d4e:	2204      	movs	r2, #4
    1d50:	6821      	ldr	r1, [r4, #0]
    1d52:	4391      	bics	r1, r2
    1d54:	6021      	str	r1, [r4, #0]
    1d56:	2d00      	cmp	r5, #0
    1d58:	d158      	bne.n	1e0c <_printf_i+0x1d4>
    1d5a:	9e04      	ldr	r6, [sp, #16]
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d064      	beq.n	1e2a <_printf_i+0x1f2>
    1d60:	0026      	movs	r6, r4
    1d62:	9b03      	ldr	r3, [sp, #12]
    1d64:	3642      	adds	r6, #66	; 0x42
    1d66:	781b      	ldrb	r3, [r3, #0]
    1d68:	7033      	strb	r3, [r6, #0]
    1d6a:	e05e      	b.n	1e2a <_printf_i+0x1f2>
    1d6c:	0648      	lsls	r0, r1, #25
    1d6e:	d5da      	bpl.n	1d26 <_printf_i+0xee>
    1d70:	b2ad      	uxth	r5, r5
    1d72:	e7d8      	b.n	1d26 <_printf_i+0xee>
    1d74:	6809      	ldr	r1, [r1, #0]
    1d76:	681a      	ldr	r2, [r3, #0]
    1d78:	0608      	lsls	r0, r1, #24
    1d7a:	d505      	bpl.n	1d88 <_printf_i+0x150>
    1d7c:	1d11      	adds	r1, r2, #4
    1d7e:	6019      	str	r1, [r3, #0]
    1d80:	6813      	ldr	r3, [r2, #0]
    1d82:	6962      	ldr	r2, [r4, #20]
    1d84:	601a      	str	r2, [r3, #0]
    1d86:	e006      	b.n	1d96 <_printf_i+0x15e>
    1d88:	0649      	lsls	r1, r1, #25
    1d8a:	d5f7      	bpl.n	1d7c <_printf_i+0x144>
    1d8c:	1d11      	adds	r1, r2, #4
    1d8e:	6019      	str	r1, [r3, #0]
    1d90:	6813      	ldr	r3, [r2, #0]
    1d92:	8aa2      	ldrh	r2, [r4, #20]
    1d94:	801a      	strh	r2, [r3, #0]
    1d96:	2300      	movs	r3, #0
    1d98:	9e04      	ldr	r6, [sp, #16]
    1d9a:	6123      	str	r3, [r4, #16]
    1d9c:	e054      	b.n	1e48 <_printf_i+0x210>
    1d9e:	681a      	ldr	r2, [r3, #0]
    1da0:	1d11      	adds	r1, r2, #4
    1da2:	6019      	str	r1, [r3, #0]
    1da4:	6816      	ldr	r6, [r2, #0]
    1da6:	2100      	movs	r1, #0
    1da8:	6862      	ldr	r2, [r4, #4]
    1daa:	0030      	movs	r0, r6
    1dac:	f000 f85e 	bl	1e6c <memchr>
    1db0:	2800      	cmp	r0, #0
    1db2:	d001      	beq.n	1db8 <_printf_i+0x180>
    1db4:	1b80      	subs	r0, r0, r6
    1db6:	6060      	str	r0, [r4, #4]
    1db8:	6863      	ldr	r3, [r4, #4]
    1dba:	6123      	str	r3, [r4, #16]
    1dbc:	2300      	movs	r3, #0
    1dbe:	9a04      	ldr	r2, [sp, #16]
    1dc0:	7013      	strb	r3, [r2, #0]
    1dc2:	e041      	b.n	1e48 <_printf_i+0x210>
    1dc4:	6923      	ldr	r3, [r4, #16]
    1dc6:	0032      	movs	r2, r6
    1dc8:	9906      	ldr	r1, [sp, #24]
    1dca:	9805      	ldr	r0, [sp, #20]
    1dcc:	9d07      	ldr	r5, [sp, #28]
    1dce:	47a8      	blx	r5
    1dd0:	1c43      	adds	r3, r0, #1
    1dd2:	d043      	beq.n	1e5c <_printf_i+0x224>
    1dd4:	6823      	ldr	r3, [r4, #0]
    1dd6:	2500      	movs	r5, #0
    1dd8:	079b      	lsls	r3, r3, #30
    1dda:	d40f      	bmi.n	1dfc <_printf_i+0x1c4>
    1ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1dde:	68e0      	ldr	r0, [r4, #12]
    1de0:	4298      	cmp	r0, r3
    1de2:	da3d      	bge.n	1e60 <_printf_i+0x228>
    1de4:	0018      	movs	r0, r3
    1de6:	e03b      	b.n	1e60 <_printf_i+0x228>
    1de8:	0022      	movs	r2, r4
    1dea:	2301      	movs	r3, #1
    1dec:	3219      	adds	r2, #25
    1dee:	9906      	ldr	r1, [sp, #24]
    1df0:	9805      	ldr	r0, [sp, #20]
    1df2:	9e07      	ldr	r6, [sp, #28]
    1df4:	47b0      	blx	r6
    1df6:	1c43      	adds	r3, r0, #1
    1df8:	d030      	beq.n	1e5c <_printf_i+0x224>
    1dfa:	3501      	adds	r5, #1
    1dfc:	68e3      	ldr	r3, [r4, #12]
    1dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1e00:	1a9b      	subs	r3, r3, r2
    1e02:	429d      	cmp	r5, r3
    1e04:	dbf0      	blt.n	1de8 <_printf_i+0x1b0>
    1e06:	e7e9      	b.n	1ddc <_printf_i+0x1a4>
    1e08:	2d00      	cmp	r5, #0
    1e0a:	d0a9      	beq.n	1d60 <_printf_i+0x128>
    1e0c:	9e04      	ldr	r6, [sp, #16]
    1e0e:	0028      	movs	r0, r5
    1e10:	0039      	movs	r1, r7
    1e12:	f7ff fcad 	bl	1770 <__aeabi_uidivmod>
    1e16:	9b03      	ldr	r3, [sp, #12]
    1e18:	3e01      	subs	r6, #1
    1e1a:	5c5b      	ldrb	r3, [r3, r1]
    1e1c:	0028      	movs	r0, r5
    1e1e:	7033      	strb	r3, [r6, #0]
    1e20:	0039      	movs	r1, r7
    1e22:	f7ff fc1f 	bl	1664 <__udivsi3>
    1e26:	1e05      	subs	r5, r0, #0
    1e28:	d1f1      	bne.n	1e0e <_printf_i+0x1d6>
    1e2a:	2f08      	cmp	r7, #8
    1e2c:	d109      	bne.n	1e42 <_printf_i+0x20a>
    1e2e:	6823      	ldr	r3, [r4, #0]
    1e30:	07db      	lsls	r3, r3, #31
    1e32:	d506      	bpl.n	1e42 <_printf_i+0x20a>
    1e34:	6863      	ldr	r3, [r4, #4]
    1e36:	6922      	ldr	r2, [r4, #16]
    1e38:	4293      	cmp	r3, r2
    1e3a:	dc02      	bgt.n	1e42 <_printf_i+0x20a>
    1e3c:	2330      	movs	r3, #48	; 0x30
    1e3e:	3e01      	subs	r6, #1
    1e40:	7033      	strb	r3, [r6, #0]
    1e42:	9b04      	ldr	r3, [sp, #16]
    1e44:	1b9b      	subs	r3, r3, r6
    1e46:	6123      	str	r3, [r4, #16]
    1e48:	9b07      	ldr	r3, [sp, #28]
    1e4a:	aa09      	add	r2, sp, #36	; 0x24
    1e4c:	9300      	str	r3, [sp, #0]
    1e4e:	0021      	movs	r1, r4
    1e50:	9b06      	ldr	r3, [sp, #24]
    1e52:	9805      	ldr	r0, [sp, #20]
    1e54:	f7ff fe82 	bl	1b5c <_printf_common>
    1e58:	1c43      	adds	r3, r0, #1
    1e5a:	d1b3      	bne.n	1dc4 <_printf_i+0x18c>
    1e5c:	2001      	movs	r0, #1
    1e5e:	4240      	negs	r0, r0
    1e60:	b00b      	add	sp, #44	; 0x2c
    1e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e64:	0000213a 	.word	0x0000213a
    1e68:	00002129 	.word	0x00002129

00001e6c <memchr>:
    1e6c:	b2c9      	uxtb	r1, r1
    1e6e:	1882      	adds	r2, r0, r2
    1e70:	4290      	cmp	r0, r2
    1e72:	d101      	bne.n	1e78 <memchr+0xc>
    1e74:	2000      	movs	r0, #0
    1e76:	4770      	bx	lr
    1e78:	7803      	ldrb	r3, [r0, #0]
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d0fb      	beq.n	1e76 <memchr+0xa>
    1e7e:	3001      	adds	r0, #1
    1e80:	e7f6      	b.n	1e70 <memchr+0x4>

00001e82 <memmove>:
    1e82:	b510      	push	{r4, lr}
    1e84:	4288      	cmp	r0, r1
    1e86:	d902      	bls.n	1e8e <memmove+0xc>
    1e88:	188b      	adds	r3, r1, r2
    1e8a:	4298      	cmp	r0, r3
    1e8c:	d308      	bcc.n	1ea0 <memmove+0x1e>
    1e8e:	2300      	movs	r3, #0
    1e90:	429a      	cmp	r2, r3
    1e92:	d007      	beq.n	1ea4 <memmove+0x22>
    1e94:	5ccc      	ldrb	r4, [r1, r3]
    1e96:	54c4      	strb	r4, [r0, r3]
    1e98:	3301      	adds	r3, #1
    1e9a:	e7f9      	b.n	1e90 <memmove+0xe>
    1e9c:	5c8b      	ldrb	r3, [r1, r2]
    1e9e:	5483      	strb	r3, [r0, r2]
    1ea0:	3a01      	subs	r2, #1
    1ea2:	d2fb      	bcs.n	1e9c <memmove+0x1a>
    1ea4:	bd10      	pop	{r4, pc}
	...

00001ea8 <_free_r>:
    1ea8:	b570      	push	{r4, r5, r6, lr}
    1eaa:	0005      	movs	r5, r0
    1eac:	2900      	cmp	r1, #0
    1eae:	d010      	beq.n	1ed2 <_free_r+0x2a>
    1eb0:	1f0c      	subs	r4, r1, #4
    1eb2:	6823      	ldr	r3, [r4, #0]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	da00      	bge.n	1eba <_free_r+0x12>
    1eb8:	18e4      	adds	r4, r4, r3
    1eba:	0028      	movs	r0, r5
    1ebc:	f000 f8d4 	bl	2068 <__malloc_lock>
    1ec0:	4a1d      	ldr	r2, [pc, #116]	; (1f38 <_free_r+0x90>)
    1ec2:	6813      	ldr	r3, [r2, #0]
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d105      	bne.n	1ed4 <_free_r+0x2c>
    1ec8:	6063      	str	r3, [r4, #4]
    1eca:	6014      	str	r4, [r2, #0]
    1ecc:	0028      	movs	r0, r5
    1ece:	f000 f8cc 	bl	206a <__malloc_unlock>
    1ed2:	bd70      	pop	{r4, r5, r6, pc}
    1ed4:	42a3      	cmp	r3, r4
    1ed6:	d909      	bls.n	1eec <_free_r+0x44>
    1ed8:	6821      	ldr	r1, [r4, #0]
    1eda:	1860      	adds	r0, r4, r1
    1edc:	4283      	cmp	r3, r0
    1ede:	d1f3      	bne.n	1ec8 <_free_r+0x20>
    1ee0:	6818      	ldr	r0, [r3, #0]
    1ee2:	685b      	ldr	r3, [r3, #4]
    1ee4:	1841      	adds	r1, r0, r1
    1ee6:	6021      	str	r1, [r4, #0]
    1ee8:	e7ee      	b.n	1ec8 <_free_r+0x20>
    1eea:	0013      	movs	r3, r2
    1eec:	685a      	ldr	r2, [r3, #4]
    1eee:	2a00      	cmp	r2, #0
    1ef0:	d001      	beq.n	1ef6 <_free_r+0x4e>
    1ef2:	42a2      	cmp	r2, r4
    1ef4:	d9f9      	bls.n	1eea <_free_r+0x42>
    1ef6:	6819      	ldr	r1, [r3, #0]
    1ef8:	1858      	adds	r0, r3, r1
    1efa:	42a0      	cmp	r0, r4
    1efc:	d10b      	bne.n	1f16 <_free_r+0x6e>
    1efe:	6820      	ldr	r0, [r4, #0]
    1f00:	1809      	adds	r1, r1, r0
    1f02:	1858      	adds	r0, r3, r1
    1f04:	6019      	str	r1, [r3, #0]
    1f06:	4282      	cmp	r2, r0
    1f08:	d1e0      	bne.n	1ecc <_free_r+0x24>
    1f0a:	6810      	ldr	r0, [r2, #0]
    1f0c:	6852      	ldr	r2, [r2, #4]
    1f0e:	1841      	adds	r1, r0, r1
    1f10:	6019      	str	r1, [r3, #0]
    1f12:	605a      	str	r2, [r3, #4]
    1f14:	e7da      	b.n	1ecc <_free_r+0x24>
    1f16:	42a0      	cmp	r0, r4
    1f18:	d902      	bls.n	1f20 <_free_r+0x78>
    1f1a:	230c      	movs	r3, #12
    1f1c:	602b      	str	r3, [r5, #0]
    1f1e:	e7d5      	b.n	1ecc <_free_r+0x24>
    1f20:	6821      	ldr	r1, [r4, #0]
    1f22:	1860      	adds	r0, r4, r1
    1f24:	4282      	cmp	r2, r0
    1f26:	d103      	bne.n	1f30 <_free_r+0x88>
    1f28:	6810      	ldr	r0, [r2, #0]
    1f2a:	6852      	ldr	r2, [r2, #4]
    1f2c:	1841      	adds	r1, r0, r1
    1f2e:	6021      	str	r1, [r4, #0]
    1f30:	6062      	str	r2, [r4, #4]
    1f32:	605c      	str	r4, [r3, #4]
    1f34:	e7ca      	b.n	1ecc <_free_r+0x24>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	200000c4 	.word	0x200000c4

00001f3c <_malloc_r>:
    1f3c:	2303      	movs	r3, #3
    1f3e:	b570      	push	{r4, r5, r6, lr}
    1f40:	1ccd      	adds	r5, r1, #3
    1f42:	439d      	bics	r5, r3
    1f44:	3508      	adds	r5, #8
    1f46:	0006      	movs	r6, r0
    1f48:	2d0c      	cmp	r5, #12
    1f4a:	d21e      	bcs.n	1f8a <_malloc_r+0x4e>
    1f4c:	250c      	movs	r5, #12
    1f4e:	42a9      	cmp	r1, r5
    1f50:	d81d      	bhi.n	1f8e <_malloc_r+0x52>
    1f52:	0030      	movs	r0, r6
    1f54:	f000 f888 	bl	2068 <__malloc_lock>
    1f58:	4a25      	ldr	r2, [pc, #148]	; (1ff0 <_malloc_r+0xb4>)
    1f5a:	6814      	ldr	r4, [r2, #0]
    1f5c:	0021      	movs	r1, r4
    1f5e:	2900      	cmp	r1, #0
    1f60:	d119      	bne.n	1f96 <_malloc_r+0x5a>
    1f62:	4c24      	ldr	r4, [pc, #144]	; (1ff4 <_malloc_r+0xb8>)
    1f64:	6823      	ldr	r3, [r4, #0]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d103      	bne.n	1f72 <_malloc_r+0x36>
    1f6a:	0030      	movs	r0, r6
    1f6c:	f000 f86a 	bl	2044 <_sbrk_r>
    1f70:	6020      	str	r0, [r4, #0]
    1f72:	0029      	movs	r1, r5
    1f74:	0030      	movs	r0, r6
    1f76:	f000 f865 	bl	2044 <_sbrk_r>
    1f7a:	1c43      	adds	r3, r0, #1
    1f7c:	d12c      	bne.n	1fd8 <_malloc_r+0x9c>
    1f7e:	230c      	movs	r3, #12
    1f80:	0030      	movs	r0, r6
    1f82:	6033      	str	r3, [r6, #0]
    1f84:	f000 f871 	bl	206a <__malloc_unlock>
    1f88:	e003      	b.n	1f92 <_malloc_r+0x56>
    1f8a:	2d00      	cmp	r5, #0
    1f8c:	dadf      	bge.n	1f4e <_malloc_r+0x12>
    1f8e:	230c      	movs	r3, #12
    1f90:	6033      	str	r3, [r6, #0]
    1f92:	2000      	movs	r0, #0
    1f94:	bd70      	pop	{r4, r5, r6, pc}
    1f96:	680b      	ldr	r3, [r1, #0]
    1f98:	1b5b      	subs	r3, r3, r5
    1f9a:	d41a      	bmi.n	1fd2 <_malloc_r+0x96>
    1f9c:	2b0b      	cmp	r3, #11
    1f9e:	d903      	bls.n	1fa8 <_malloc_r+0x6c>
    1fa0:	600b      	str	r3, [r1, #0]
    1fa2:	18cc      	adds	r4, r1, r3
    1fa4:	6025      	str	r5, [r4, #0]
    1fa6:	e003      	b.n	1fb0 <_malloc_r+0x74>
    1fa8:	428c      	cmp	r4, r1
    1faa:	d10e      	bne.n	1fca <_malloc_r+0x8e>
    1fac:	6863      	ldr	r3, [r4, #4]
    1fae:	6013      	str	r3, [r2, #0]
    1fb0:	0030      	movs	r0, r6
    1fb2:	f000 f85a 	bl	206a <__malloc_unlock>
    1fb6:	0020      	movs	r0, r4
    1fb8:	2207      	movs	r2, #7
    1fba:	300b      	adds	r0, #11
    1fbc:	1d23      	adds	r3, r4, #4
    1fbe:	4390      	bics	r0, r2
    1fc0:	1ac3      	subs	r3, r0, r3
    1fc2:	d0e7      	beq.n	1f94 <_malloc_r+0x58>
    1fc4:	425a      	negs	r2, r3
    1fc6:	50e2      	str	r2, [r4, r3]
    1fc8:	e7e4      	b.n	1f94 <_malloc_r+0x58>
    1fca:	684b      	ldr	r3, [r1, #4]
    1fcc:	6063      	str	r3, [r4, #4]
    1fce:	000c      	movs	r4, r1
    1fd0:	e7ee      	b.n	1fb0 <_malloc_r+0x74>
    1fd2:	000c      	movs	r4, r1
    1fd4:	6849      	ldr	r1, [r1, #4]
    1fd6:	e7c2      	b.n	1f5e <_malloc_r+0x22>
    1fd8:	2303      	movs	r3, #3
    1fda:	1cc4      	adds	r4, r0, #3
    1fdc:	439c      	bics	r4, r3
    1fde:	42a0      	cmp	r0, r4
    1fe0:	d0e0      	beq.n	1fa4 <_malloc_r+0x68>
    1fe2:	1a21      	subs	r1, r4, r0
    1fe4:	0030      	movs	r0, r6
    1fe6:	f000 f82d 	bl	2044 <_sbrk_r>
    1fea:	1c43      	adds	r3, r0, #1
    1fec:	d1da      	bne.n	1fa4 <_malloc_r+0x68>
    1fee:	e7c6      	b.n	1f7e <_malloc_r+0x42>
    1ff0:	200000c4 	.word	0x200000c4
    1ff4:	200000c8 	.word	0x200000c8

00001ff8 <_realloc_r>:
    1ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffa:	0007      	movs	r7, r0
    1ffc:	000d      	movs	r5, r1
    1ffe:	0016      	movs	r6, r2
    2000:	2900      	cmp	r1, #0
    2002:	d105      	bne.n	2010 <STACK_SIZE+0x10>
    2004:	0011      	movs	r1, r2
    2006:	f7ff ff99 	bl	1f3c <_malloc_r>
    200a:	0004      	movs	r4, r0
    200c:	0020      	movs	r0, r4
    200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2010:	2a00      	cmp	r2, #0
    2012:	d103      	bne.n	201c <STACK_SIZE+0x1c>
    2014:	f7ff ff48 	bl	1ea8 <_free_r>
    2018:	0034      	movs	r4, r6
    201a:	e7f7      	b.n	200c <STACK_SIZE+0xc>
    201c:	f000 f826 	bl	206c <_malloc_usable_size_r>
    2020:	002c      	movs	r4, r5
    2022:	4286      	cmp	r6, r0
    2024:	d9f2      	bls.n	200c <STACK_SIZE+0xc>
    2026:	0031      	movs	r1, r6
    2028:	0038      	movs	r0, r7
    202a:	f7ff ff87 	bl	1f3c <_malloc_r>
    202e:	1e04      	subs	r4, r0, #0
    2030:	d0ec      	beq.n	200c <STACK_SIZE+0xc>
    2032:	0029      	movs	r1, r5
    2034:	0032      	movs	r2, r6
    2036:	f7ff fbef 	bl	1818 <memcpy>
    203a:	0029      	movs	r1, r5
    203c:	0038      	movs	r0, r7
    203e:	f7ff ff33 	bl	1ea8 <_free_r>
    2042:	e7e3      	b.n	200c <STACK_SIZE+0xc>

00002044 <_sbrk_r>:
    2044:	2300      	movs	r3, #0
    2046:	b570      	push	{r4, r5, r6, lr}
    2048:	4c06      	ldr	r4, [pc, #24]	; (2064 <_sbrk_r+0x20>)
    204a:	0005      	movs	r5, r0
    204c:	0008      	movs	r0, r1
    204e:	6023      	str	r3, [r4, #0]
    2050:	f7ff fad0 	bl	15f4 <_sbrk>
    2054:	1c43      	adds	r3, r0, #1
    2056:	d103      	bne.n	2060 <_sbrk_r+0x1c>
    2058:	6823      	ldr	r3, [r4, #0]
    205a:	2b00      	cmp	r3, #0
    205c:	d000      	beq.n	2060 <_sbrk_r+0x1c>
    205e:	602b      	str	r3, [r5, #0]
    2060:	bd70      	pop	{r4, r5, r6, pc}
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	20000228 	.word	0x20000228

00002068 <__malloc_lock>:
    2068:	4770      	bx	lr

0000206a <__malloc_unlock>:
    206a:	4770      	bx	lr

0000206c <_malloc_usable_size_r>:
    206c:	1f0b      	subs	r3, r1, #4
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	1f18      	subs	r0, r3, #4
    2072:	2b00      	cmp	r3, #0
    2074:	da01      	bge.n	207a <_malloc_usable_size_r+0xe>
    2076:	580b      	ldr	r3, [r1, r0]
    2078:	18c0      	adds	r0, r0, r3
    207a:	4770      	bx	lr

0000207c <_tcc_intflag>:
    207c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    208c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    209c:	0000 0001 0000 0002 0000 0004 0000 0008     ................
    20ac:	7325 0000 4548 4c4c 0a4f 0000 0800 4200     %s..HELLO......B
    20bc:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    20cc:	1c00 4200 0e6e 0000 0e6a 0000 0e6a 0000     ...Bn...j...j...
    20dc:	0ed0 0000 0ed0 0000 0e82 0000 0e74 0000     ............t...
    20ec:	0e88 0000 0ebe 0000 1010 0000 0ff0 0000     ................
    20fc:	0ff0 0000 107c 0000 1002 0000 101e 0000     ....|...........
    210c:	0ff4 0000 102c 0000 106c 0000 2d23 2b30     ....,...l...#-0+
    211c:	0020 6c68 004c 6665 4567 4746 3000 3231      .hlL.efgEFG.012
    212c:	3433 3635 3837 4139 4342 4544 0046 3130     3456789ABCDEF.01
    213c:	3332 3534 3736 3938 6261 6463 6665 0000     23456789abcdef..

0000214c <_init>:
    214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2152:	bc08      	pop	{r3}
    2154:	469e      	mov	lr, r3
    2156:	4770      	bx	lr

00002158 <__init_array_start>:
    2158:	000000dd 	.word	0x000000dd

0000215c <_fini>:
    215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2162:	bc08      	pop	{r3}
    2164:	469e      	mov	lr, r3
    2166:	4770      	bx	lr

00002168 <__fini_array_start>:
    2168:	000000b5 	.word	0x000000b5
